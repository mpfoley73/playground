---
title: "Cleveland's Changing Population"
subtitle: "Exploring the US Census with R"
date: "`r Sys.Date()`"
format:
  html:
    embed-resources: true
    # css: style.css
    toc: true
    toc_depth: 3
    toc-title: "Content"
    toc-location: left
    theme: 
      light: sandstone
      dark: darkly
    code-fold: show
    code-summary: "Show the code"
  # docx:
  #   reference-doc: "hunger-network-reference.docx"
editor: source
editor_options: 
  chunk_output_type: console
execute:
  echo: true
  message: false
  warning: false
---

The resurgence of people moving to downtown Cleveland is making news.[^1] According to a study commissioned by Downtown Cleveland Inc., the downtown population was almost 19,000 in the 2020 census, a 22% increase from 2010.[^2] However, Cleveland Open Data shows only 13,000[^cod-downtown]. Cleveland Scene reports that there are lots of estimates out there, one as low as 8,000![^3] What gives? The organizations may be using different sources, like the decennial US census vs the more recent, but less comprehensive, American Community Survey. But it seems more likely they are using different geographic boundaries. 

I was able to reproduce some estimates. My main tools to do this was the **tidycensus** R package, and the Cleveland Open Data service. I've stepped through the process below.

::: {.callout-note}
This web page is a working file. It's mostly a toy project to learn cool R package, learn how to retrieve data from the US Census Bureau API, and leave a record I can refer to later. If you are reading this and are not me, I hope this helps with whatever you're doing. Otherwise, 'hello, future me!' You can find the source code and downloaded data on my [GitHub page](https://github.com/mpfoley73/playground/census).
:::

[^1]: ["Opinion: Downtown Cleveland's strategy to broaden appeal sees success"](https://www.crainscleveland.com/crains-forum-population-growth/downtown-cleveland-strategy-revitalize-finds-some-success), Crains Cleveland Business. ["Clevelandâ€™s downtown population continues to surge"](https://www.cleveland19.com/2024/11/15/clevelands-downtown-population-continues-surge/), Cleveland Fox 19 News.

[^2]: [Downtown Cleveland Inc.](https://www.downtowncleveland.com/research) commissioned a report, ["Downtown Cleveland Market Study Report"](https://static1.squarespace.com/static/645ba4265ac81f7c3a42f05d/t/6491ab0e8821d157e67c6f24/1687268112978/Downtown%2BCLE%2BMarket%2BStudy%2B2023.pdf) (pdf), by the Urban Partners consulting firm. The report was released in Apr 2023. Figures are from Table 1: 15,330 people in 2010, 18,708 people in 2020 (`r scales::percent(18708/15330-1, 1)` increase).

[^cod-downtown]: See the Downtown neighborhood (statistical processing area, SPA) in the [data table](https://data.clevelandohio.gov/datasets/ClevelandGIS::census-2020-analysis/explore?layer=0&location=41.454326%2C-81.671523%2C10.98&showTable=true).

[^3]: ["There's Still No Agreement on How Many Clevelanders Actually Live Downtown"](https://www.clevescene.com/news/theres-still-no-agreement-on-how-many-clevelanders-actually-live-downtown-45115341), Cleveland Scene, Sep 17, 2024.

# Defining "Downtown"

Cleveland extends from Cleveland Hopkins Airport on the west all the way to Euclid on the east. It's mostly bounded on the south by I-80. Here is the map from the [Cleveland Wikipedia Page](https://en.wikipedia.org/wiki/Cleveland).

[![](inputs/wikipedia_cleveland.png)](https://en.wikipedia.org/wiki/Cleveland)

The 2020 US decennial census counted 372K people in Cleveland.[^visual-cleve] That's a *decline* from 397K in 2010. The 1-year American Community Survey (ACS) shows it is still falling, down to 363K in 2023.[^acs-2023] But the decline is uneven, and parts of the city are actually growing, including the downtown area. There is no official definition of downtown, so we can make some choices. The Census Bureau provides the building blocks for a definition: over 15K census blocks, rolled up to around 200 census tracts.

[^visual-cleve]: Cleveland's population plateaued around 1930 at 900K. The peak was 914K in the 1950 census. Between 1960 and 1980 the population declined by a third. The current population is slightly below the 1900 value. See Visual Cleveland at https://visual.clevelandhistory.org/census/.

[^acs-2023]: 362,670 +/- 62. https://data.census.gov/table/ACSST1Y2023.S0101?q=cleveland,%20oh

The Cleveland City Planning Commission defines 34 neighborhoods in Cleveland for urban planning initiatives.[^5] Cleveland Open Data has an [interactive map](https://data.clevelandohio.gov/datasets/b2a2da54401a41e78dd71563f01f5273_0/explore?location=41.494849%2C-81.705800%2C11.82) that you can explore and download. There is a [pdf map](https://planning.clevelandohio.gov/2010census/downloads/SPAs.pdf) at the CPC that I copy/pasted below. You can see from the map that there is a neighborhood actually called "Downtown". It's the area bounded by the Cuyahoga and I-90.

[^5]: Social Planning Areas (SPAs) were developed in the 1950s to coordinate social services at the neighborhood level. Learn more at the [Encyclopedia of Cleveland History](https://case.edu/ech/articles/s/social-planning-areas). [Wikipedia](https://en.wikipedia.org/wiki/Neighborhoods_in_Cleveland) has a nice explanation of how neighborhoods relate to Statistical (or social) Planning Areas.

[![](inputs/cleveland_spa.png)](https://planning.clevelandohio.gov/2010census/downloads/SPAs.pdf)

So that is one definition. A second comes from a study commission by [Downtown Cleveland, Inc.](https://www.downtowncleveland.com/). Urban Partners published a study of the Downtown Cleveland market in 2023. Page 3 of the [pdf report](https://static1.squarespace.com/static/645ba4265ac81f7c3a42f05d/t/6491ab0e8821d157e67c6f24/1687268112978/Downtown%2BCLE%2BMarket%2BStudy%2B2023.pdf) shows a Westside and a Downtown Core. Whereas the Downtown neighborhood had about 13.3K people in the 2020 census, this definition has 18.7K in the Downtown Core. Notice how the Downtown Core takes a bite out of the Central neighborhood on the east side, and parts of the West Bank of the Flats in the Cuyahoga Valley neighborhood and Ohio City neighborhood.

[![](inputs/urban_planners_downtown.png)](https://static1.squarespace.com/static/645ba4265ac81f7c3a42f05d/t/6491ab0e8821d157e67c6f24/1687268112978/Downtown%2BCLE%2BMarket%2BStudy%2B2023.pdf)

I think I'll stick with the CPC definitions, but keep the Ohio City, Central, and other neighborhoods in mind.

# Blocks, Tracts, and Subdivisions

Several libraries make it easy to work with census data. The **tidycencus** package was developed to interface with the US Census Bureau APIs. It also returns feature geometry for spatial analysis. The **tigris** package works with the Census Bureau's TIGER/Line shapefiles, and the **sf** (simple features) package to perform spatial operations.

```{r}
#| label: setup
#| results: hide
#| code-fold: false

library(tidyverse)
library(glue)
library(scales)
library(gt)
library(ggiraph)  # interactive plots

library(tidycensus)
library(tigris) # TIGER/Line shapefiles
library(sf)  # simple features for spatial analysis
```

My first step is to get a precise definition of Cleveland's neighborhoods. The [City of Cleveland Open Data](https://data.clevelandohio.gov/) web site has an interactive [analysis of the 2020 US Census](https://data.clevelandohio.gov/maps/25f6cdc173774df594b4db4f8aa98926).[^open-data] The map has five layers. The blocks file includes the census block and tract, plus the CPC's neighborhood identifier. 

[^open-data]: From https://data.clevelandohio.gov/, go to the [Data Catalog](https://data.clevelandohio.gov/search?collection=Dataset) and scroll to [Census 2020 Analysis](https://data.clevelandohio.gov/maps/25f6cdc173774df594b4db4f8aa98926).

```{r}
#| label: tigris
#| results: hide
#| code-fold: false

# Cleveland populated blocks. Includes block, tract, and SPA name.
cleve_blocks <- st_read(file.path(
  "inputs/Cleveland Populated Blocks 2020",
  "Decennial_2020_Populated_Blocks_Cleveland_Only.shp"
)) |>
  select(-starts_with("P0"), -starts_with("H0"))

# Nice contiguous shape file. No census bock/tract/etc. here though.
cleve_neigh_0 <-
  st_read(file.path(
  "inputs/Cleveland Neighborhoods",
  "Neighborhood_Population_Change.shp"
))
```

I can use this along with other shape data from the **tigris** package to define and map Cleveland and its neighborhoods.

```{r}
#| code-fold: true
#| message: false
#| warning: false
#| results: hide

oh_state <- tigris::states(cb = TRUE) |> filter(STUSPS == "OH") 

oh_counties <- tigris::counties(cb = TRUE) |> filter(STUSPS == "OH")
cuya_county <- oh_counties |> filter(NAME == "Cuyahoga")

oh_places <- tigris::places("OH", year = 2022)
my_places <-
  oh_places |> 
  filter(NAME %in% c(
    "Euclid", "Parma", "North Olmsted", "Shaker Heights", "Solon", "Lakewood")) |>
  st_centroid()

terminal_tower <- st_sfc(st_point(c(-81.69387, 41.49824)), crs = 4326)
```

```{r}
#| code-fold: true

p <-
  ggplot() +
  geom_sf(data = oh_state, color = "gray60") +
  geom_sf_interactive(
    data = oh_counties, 
    aes(tooltip = NAME),
    fill = "honeydew", color = "gray90"
  ) +
  geom_sf(data = cuya_county, fill = "honeydew2", color = "gray80") +
  geom_sf_interactive(
    data = cleve_neigh_0,
    aes(tooltip = SPA_NAME),
    fill = "honeydew3", color = "honeydew4"
  ) +
  geom_sf(data = my_places, color = "honeydew3") +
  geom_sf(data = terminal_tower, color = "firebrick") +
  geom_sf_text(data = terminal_tower, aes(label = "Terminal Tower"),
               size = 3, hjust = .2, vjust = 1, color = "firebrick") +
  geom_sf_text(data = my_places, aes(label = NAME), size = 3, hjust = .2, vjust = 1) +
  coord_sf(xlim = c(-82.0, -81.3), ylim = c(41.25, 41.65)) +
  theme(
    panel.background = element_rect(fill = "skyblue"),
    panel.grid = element_blank(),
    axis.text = element_blank()
  ) +
  labs(
    x = NULL, y = NULL, 
    title = glue("Cleveland and Surrounding Cities, Cuyahoga County")
  )

girafe(ggobj = p)
```

# Census Data

I don't want to abuse the US Census Bureau API, so I'll set a flag to only download data as I'm developing this script. Once I have what I want, I'll keep my data on my local drive and build my report.

```{r}
#| code-fold: false

USE_API <- FALSE
```

The Census Bureau API allows you to select multiple variables from a single census file. There are a few files for each census, and the variable names change. I want the Cleveland area population in 2000, 2010, 2020, and the American Community Survey (ACS) 1-year estimate from 2023 (most recent). So despite the handiness of **tidycensus** package, data collection is still going to be a bit tedious.

The [decennial census developer page](https://www.census.gov/data/developers/data-sets/decennial-census.html) lists the accessible datasets: 2000, 2010, and 2020. Before you do anything, you'll need an API key from the Bureau. This is quick and easy: just click the "Request a KEY" tile in the menu at the left. The Census Bureau emails you a key. Best practice is to save the key in an .Renviron file.

``` r
usethis::edit_r_environ(scope = "project")
```

This opens (or creates) a .Renviron file in your project root. Add your key. The name is important: `CENSUS_API_KEY`. The **tidycensus** functions send that system variable (if you don't explicitly supply it in the function). Set it like this:

``` r
CENSUS_API_KEY="abc123"
```

Now we're ready to pull census data. I'll start with 2020.

## 2020

Through trial and error, I discovered the Redistricting Data (PL 94-171) contains overall population. There is a full [list of variables](https://api.census.gov/data/2020/dec/pl/variables.html) that represent the various sub-groups of the population. I used it and the `tidycensus::load_variables()` function to identify the ones I want. I'll include race/ethnicity to investigate demographic trends. 

```{r}
#| code-fold: false

pl_2020_vars <-
  tidycensus::load_variables(2020, "pl") |>
  filter(
    between(name, "P2_001N", "P2_011N"),
    !name %in% c("P2_003N", "P2_004N")
  )
```

Here they are after a bit of cleaning.

```{r}
#| code-fold: true

pl_2020_vars <- 
  pl_2020_vars |>
  mutate(
    label = case_when(
      str_detect(label, "White") ~ "White",
      str_detect(label, "Black") ~ "Black",
      str_detect(label, "Asian") ~ "Asian",
      str_detect(label, "American Indian") ~ "American Indian",
      str_detect(label, "Native Hawaiian") ~ "Pacific Islander",
      str_detect(label, "Some Other Race") ~ "Other",
      str_detect(label, "two or more races") ~ "Two or more races",
      str_detect(label, "Hispanic") ~ "Hispanic",
      str_detect(label, "Total") ~ "Total",
      TRUE ~ label
    ),
    rpt_group = if_else(name == "P2_001N", "Total", "Race/ethnicity"),
    rpt_level = if_else(
      label %in% c("White", "Black", "Hispanic", "Asian", "Total"),
      label, "Other")
  ) |>
  select(variable = name, label, rpt_group, rpt_level)

pl_2020_vars
```

The Demographic Profile contains age counts, so I'll grab that too since I am curious about general age patterns.

```{r}
#| code-fold: false

dp_2020_vars <- 
  tidycensus::load_variables(2020, "dp") |>
  filter(
    str_detect(label, "Count!!SEX AND AGE!!Total population"),
    !str_detect(label, "Selected Age Categories"),
    name != "DP1_0001C"
  )
```

Clean these too.

```{r}
#| code-fold: true

dp_2020_vars <- 
  dp_2020_vars |>
  mutate(
    label = str_remove_all(label, "(Count!!SEX AND AGE!!Total population)|(!!)"),
    label = if_else(label == "", "Total", label),
    rpt_group = "Age",
    rpt_level = case_when(
      name <= "DP1_0004C" ~ "Under 15 yrs",
      name <= "DP1_0006C" ~ "15 to 24 yrs",
      name <= "DP1_0008C" ~ "25 to 34 yrs",
      name <= "DP1_0010C" ~ "35 to 44 yrs",
      name <= "DP1_0012C" ~ "45 to 54 yrs",
      name <= "DP1_0014C" ~ "55 to 64 yrs",
      TRUE ~ "65+ yrs"
    )
  ) |>
  select(variable = name, label, rpt_group, rpt_level)

dp_2020_vars
```

With the variable names in hand, we can request the data from the API. Cleveland is one of 59 subdivisions within Cuyahoga County. Counties are subdivided into census tracts, and census tracts are subdivided into census blocks. Cities often overlap census tracts, so I'll defined Cleveland by joining to the `cleve_blocks` data I got from Cleveland Open Data.

```{r}
#| code-fold: true
#| results: hide

# Utility function to create factors
my_rpt_relevel <- function(x) {
  ethn <- c("Black", "White", "Hispanic", "Asian", "Other", "Total")
  x <- fct_relevel(x, ethn, after = Inf)
  x <- fct_relevel(x, "Under 15 yrs", after = 0)
  return(x)
}

# Urban Partners defn of Westside, uses tracts.
westside_tracts <- c(
  "103100", "103400", "103500", "103602", "103800", "103900", "104100", 
  "104200", "104300", "197800", "197700", "197500", "104400"
)

# Urban Partners defn of Downtown Core, uses tracts and blocks
downtown_core_tracts_2020 <- c(
  "103300", "107101", "107701", "107802", "109301")
downtown_core_blocks_2020 <- paste0(
  "39035108701", c("2001", "2004", "2006", "2008"))

if (USE_API) {

  subdiv_2020_pl <- 
    get_decennial( 
      geography = "county subdivision",
      sumfile = "pl",
      variables = pl_2020_vars$variable,
      state = "OH",
      county = "Cuyahoga",
      geometry = TRUE, 
      year = 2020
    ) |> 
    inner_join(pl_2020_vars, by = "variable") |>
    summarize(
      .by = c(GEOID, NAME, geometry, rpt_group, rpt_level),
      value = sum(value)
    )
  
  subdiv_2020_dp <- 
    get_decennial( 
      geography = "county subdivision",
      sumfile = "dp",
      variables = dp_2020_vars$variable,
      state = "OH",
      county = "Cuyahoga",
      geometry = TRUE, 
      year = 2020
    ) |> 
    inner_join(dp_2020_vars, by = "variable") |>
    summarize(
      .by = c(GEOID, NAME, geometry, rpt_group, rpt_level),
      value = sum(value)
    )
  
  tract_2020_pl <- 
    get_decennial( 
      geography = "tract",
      sumfile = "pl",
      variables = pl_2020_vars$variable,
      state = "OH",
      county = "Cuyahoga",
      geometry = TRUE, 
      year = 2020
    ) |> 
    inner_join(pl_2020_vars, by = "variable") |>
    summarize(
      .by = c(GEOID, NAME, geometry, rpt_group, rpt_level),
      value = sum(value)
    )
  
  tract_2020_dp <- 
    get_decennial( 
      geography = "tract",
      sumfile = "dp",
      variables = dp_2020_vars$variable,
      state = "OH",
      county = "Cuyahoga",
      geometry = TRUE, 
      year = 2020
    ) |>
    inner_join(dp_2020_vars, by = "variable") |>
    summarize(
      .by = c(GEOID, NAME, geometry, rpt_group, rpt_level),
      value = sum(value)
    )
  
  block_2020_pl <- 
    get_decennial( 
      geography = "block",
      sumfile = "pl",
      variables = pl_2020_vars$variable,
      state = "OH",
      county = "Cuyahoga",
      geometry = TRUE, 
      year = 2020
    ) |> 
    inner_join(pl_2020_vars, by = "variable") |>
    summarize(
      .by = c(GEOID, NAME, geometry, rpt_group, rpt_level),
      value = sum(value)
    )
  
  # dp is not available at the block level

  subdiv_2020 <- 
    bind_rows(subdiv_2020_pl, subdiv_2020_dp) |>
    mutate(
      rpt_level = my_rpt_relevel(rpt_level),
      NAME = str_remove_all(NAME, "(, Cuyahoga County, Ohio)|(village)|(city)"),
      NAME = str_trim(NAME)
    )
           
  tract_2020 <-
    bind_rows(tract_2020_pl, tract_2020_dp) |>
    mutate(rpt_level = my_rpt_relevel(rpt_level))
  
  block_2020 <-
    block_2020_pl |>
    inner_join(
      cleve_blocks |> as_tibble() |> select(GEOID20, SPA = SPA_NAME), 
      by = c("GEOID" = "GEOID20")
    ) |>
    mutate(
      rpt_level = my_rpt_relevel(rpt_level),
      greater_downtown = case_when(
        str_sub(GEOID, 6, 11) %in% westside_tracts ~ "Westside",
        str_sub(GEOID, 6, 11) %in% downtown_core_tracts ~ "Downtown Core",
        GEOID %in% downtown_core_blocks_2020 ~ "Downtown Core",
        TRUE ~ "Other"
      ),
      SPA = factor(str_to_title(SPA)),
      SPA = fct_relevel(SPA, "Downtown", after = 0),
      greater_downtown = factor(
        greater_downtown, levels = c("Downtown Core", "Westside", "Other"))
    )
  
  save(
    subdiv_2020, tract_2020, block_2020,
    file = "decennial_2020.Rdata"
  )

} else {
  
  load("decennial_2020.Rdata")
  
}
```

```{r}
#| echo: false

# Transform Cleveland Neighborhoods coordinate system to match census.
cleve_neigh <- 
  cleve_neigh_0 |>
  st_make_valid() |>
  st_transform(st_crs(block_2020)) |>
  rename(SPA = SPA_NAME)

total_pop_table <- function(subdiv_yyyy, block_yyyy, yyyy) {

  by_subdiv <- 
    subdiv_yyyy |> 
    as_tibble() |>
    filter(rpt_level == "Total", value > 0) |>
    mutate(subgrp = if_else(NAME == "Cleveland", NAME, "Other")) |>
    summarize(.by = subgrp, pop = sum(value)) |>
    arrange(subgrp) |>
    janitor::adorn_totals()
  
  by_spa <-
    block_yyyy |>
    as_tibble() |>
    filter(rpt_level == "Total") |>
    summarize(.by = SPA, pop = sum(value)) |>
    arrange(SPA) |>
    rename(subgrp = SPA) |>
    janitor::adorn_totals()
  
  by_grtr <-
    block_yyyy |>
    as_tibble() |>
    filter(rpt_level == "Total") |>
    summarize(.by = greater_downtown, pop = sum(value)) |>
    arrange(greater_downtown) |>
    rename(subgrp = greater_downtown) |>
    janitor::adorn_totals()
  
  bind_rows(
    `Cuyahoga County Subdivisions` = by_subdiv,
    `Cleveland Neighborhoods` = by_spa,
    `Greater Downtown` = by_grtr,
    .id = "Grouping"
  ) |>
    group_by(Grouping) |>
    gt() |>
    gt::fmt_number(columns = pop, decimals = 0) |>
    gt::tab_header(
      glue("{yyyy} Population Estimates for Cleveland and Vicinity")
    ) |>
    gt::tab_style(
      style = cell_text(color = "firebrick4"),
      locations = cells_body(rows = str_detect(subgrp, "(Cleveland)|(Downtown)"))
    ) |>
    gt::tab_style(
      style = cell_fill(color = "honeydew2"),
      locations = cells_group()
    ) |>
    gt::tab_style(
      style = cell_text(weight = "bold"),
      locations = cells_body(rows = subgrp == "Total")
    ) |>
    gt::cols_label(subgrp = "", pop = "Population")
}

total_pop_plot <- function(subdiv_yyyy, block_yyyy, yyyy) {
  
  subdiv_yyyy_total <- 
    subdiv_yyyy |>
    filter(rpt_group == "Total") |>
    mutate(tt = glue("{NAME}\n{comma(value)}"))
  
  block_yyyy_total <- 
    block_yyyy |> 
    filter(rpt_group == "Total") |>
    as_tibble() |>
    select(SPA, value)

  neigh_yyyy_total <- 
    cleve_neigh |>
    # st_join(st_centroid(block_yyyy_total), join = st_contains) |>
    inner_join(block_yyyy_total, by = "SPA") |>
    summarize(.by = SPA, geometry = st_union(geometry), value = sum(value)) |>
    mutate(tt = glue("{SPA}\n{comma(value)}"))

  p <-
  ggplot() +
  geom_sf(data = oh_state, color = "gray60") +
  geom_sf_interactive(
    data = oh_counties, 
    aes(tooltip = NAME),
    fill = "honeydew", color = "gray90"
  ) +
  geom_sf_interactive(
    data = subdiv_yyyy_total, 
    aes(tooltip = tt), 
    fill = "honeydew2", color = "honeydew3"
  ) +
  geom_sf_interactive(
    data = neigh_yyyy_total |> filter(SPA != "Downtown"), 
    aes(tooltip = tt),
    fill = "darkseagreen"
  ) + coord_sf(xlim = c(-82.0, -81.3), ylim = c(41.25, 41.65)) +
  geom_sf_interactive(
    data = neigh_yyyy_total |> filter(SPA == "Downtown"), 
    aes(tooltip = tt),
    fill = "darkseagreen1"
  ) +
  coord_sf(xlim = c(-82.0, -81.3), ylim = c(41.25, 41.65)) +
  theme(
    panel.background = element_rect(fill = "skyblue"),
    panel.grid = element_blank(),
    axis.text = element_blank()
  ) +
  labs(
    title = glue("Cuyahoga County Population, {yyyy}"),
    subtitle = glue("Cuyahoga County Subdivisions (sage),\n",
                   "City of Cleveland census tracts (dark green), and \n",
                   "Cleveland Neighborhoods (clusters of census tracts).")
  )

girafe(ggobj = p)

}
```

Cleveland's population was 372,624 in 2020. The Downtown neighborhood had 13,302 people. The Downtown Core, which included a portion of the Central neighborhood, had 18,708 people.

::: panel-tabset

### Table

```{r}
#| echo: false
total_pop_table(subdiv_2020, block_2020, 2020) 
```

### Map

```{r}
#| echo: false
total_pop_plot(subdiv_2020, block_2020, 2020) 
```

:::

## 2010

Unfortunately, getting 2010 and 2000 isn't as simple as changing the year parameter in the API calls because they use a different file - Summary File 1.

```{r}
#| code-fold: false

sf1_2010_vars <-
  tidycensus::load_variables(2010, "sf1") |>
  filter(
    concept %in% c("HISPANIC OR LATINO ORIGIN BY RACE", "SEX BY AGE"),
    !name %in% c("P005002", "P012001", "P012002", "P012026"),
    !str_detect(label, "Total!!Hispanic or Latino!!"),
    !str_detect(name, "^PCT012")
  )
```

```{r}
#| code-fold: true

sf1_2010_vars <-
  sf1_2010_vars |>
  mutate(
    label = str_remove(label, "(Total!!Male!!)|(Total!!Female!!)"),
    label = case_when(
      str_detect(label, "White") ~ "White",
      str_detect(label, "Black") ~ "Black",
      str_detect(label, "Asian") ~ "Asian",
      str_detect(label, "American Indian") ~ "American Indian",
      str_detect(label, "Native Hawaiian") ~ "Pacific Islander",
      str_detect(label, "Some Other Race") ~ "Other",
      str_detect(label, "Two or More Races") ~ "Two or more races",
      str_detect(label, "Hispanic") ~ "Hispanic",
      str_detect(label, "Total") ~ "Total",
      TRUE ~ label,
    ),
    rpt_group = case_when(
      name == "P005001" ~ "Total",
      between(name, "P005003", "P005010") ~ "Race/ethnicity",
      TRUE ~ "Age"
    ),
    rpt_level = case_when(
      label %in% c("White", "Black", "Hispanic", "Asian", "Total", "Other") ~ label,
      label %in% c("American Indian", "Pacific Islander", "Two or more races") ~ "Other",
      label %in% c("Under 5 years", "5 to 9 years", "10 to 14 years") ~ "Under 15 yrs",
      between(label, "15 to 17 years", "22 to 24 years") ~ "15 to 24 yrs",
      label %in% c("25 to 29 years", "30 to 34 years") ~ "25 to 34 yrs",
      label %in% c("35 to 39 years", "40 to 44 years") ~ "35 to 44 yrs",
      label %in% c("45 to 49 years", "50 to 54 years") ~ "45 to 54 yrs",
      between(label, "55 to 59 years", "62 to 64 years") ~ "55 to 64 yrs",
      between(label, "65 and 66 years", "85 years and over") ~ "65+ yrs"
    )
  ) |>
  select(variable = name, label, rpt_group, rpt_level)

sf1_2010_vars
```

Request the data from the API.

```{r}
#| code-fold: true
#| results: hide

downtown_core_tracts_2010 <- c(
  "103300", "107101", "107701", "107802", "109301")
downtown_core_blocks_2010 <- 
  paste0("39035108701", c("3000", "3001", "3002", "3003", "3004"))

if (USE_API) {

  subdiv_2010 <- 
    get_decennial( 
      geography = "county subdivision",
      sumfile = "sf1",
      variables = sf1_2010_vars$variable,
      state = "OH",
      county = "Cuyahoga",
      geometry = TRUE, 
      year = 2010
    ) |> 
    inner_join(sf1_2010_vars, by = "variable") |>
    summarize(
      .by = c(GEOID, NAME, geometry, rpt_group, rpt_level),
      value = sum(value)
    ) |>
    mutate(
      rpt_level = my_rpt_relevel(rpt_level),
      NAME = str_remove_all(NAME, "(, Cuyahoga County, Ohio)|(village)|(city)"),
      NAME = str_trim(NAME)
    )
  
  tract_2010 <- 
    get_decennial( 
      geography = "tract",
      sumfile = "sf1",
      variables = sf1_2010_vars$variable,
      state = "OH",
      county = "Cuyahoga",
      geometry = TRUE, 
      year = 2010
    ) |> 
    inner_join(sf1_2010_vars, by = "variable") |>
    summarize(
      .by = c(GEOID, NAME, geometry, rpt_group, rpt_level),
      value = sum(value)
    ) |>
    mutate(rpt_level = my_rpt_relevel(rpt_level))

  block_2010_0 <- 
    get_decennial( 
      geography = "block",
      sumfile = "sf1",
      variables = sf1_2010_vars$variable,
      state = "OH",
      county = "Cuyahoga",
      geometry = TRUE, 
      year = 2010
    ) |> 
    inner_join(sf1_2010_vars, by = "variable") |>
    summarize(
      .by = c(GEOID, NAME, geometry, rpt_group, rpt_level),
      value = sum(value)
    ) |>
    mutate(rpt_level = my_rpt_relevel(rpt_level))

  block_2010 <-
    st_join(cleve_neigh, st_centroid(block_2010_0), join = st_contains) |>
    mutate(
      rpt_level = my_rpt_relevel(rpt_level),
      greater_downtown = case_when(
        str_sub(GEOID, 6, 11) %in% westside_tracts ~ "Westside",
        str_sub(GEOID, 6, 11) %in% downtown_core_tracts_2010 ~ "Downtown Core",
        GEOID %in% downtown_core_blocks_2010 ~ "Downtown Core",
        TRUE ~ "Other"
      ),
      SPA = factor(str_to_title(SPA)),
      SPA = fct_relevel(SPA, "Downtown", after = 0),
      greater_downtown = factor(
        greater_downtown, levels = c("Downtown Core", "Westside", "Other"))
    ) |>
    select(GEOID, NAME, geometry, rpt_group, rpt_level, value, SPA, greater_downtown)
  
  save(
    subdiv_2010, tract_2010, block_2010,
    file = "decennial_2010.Rdata"
  )

} else {
  
  load("decennial_2010.Rdata")
  
}
```

The sum of the neighborhoods, 395,601, didn't quite roll match the city, 396,815. There must be city blocks whose centers are not captured in the neighborhoods shape. I haven't thought of a good way to ferret them out, so I think I'll just let this go.

The Downtown population was only 9,464, so it has indeed grown quite a bit from 2010 to 2020.

::: panel-tabset

### Table

```{r}
#| echo: false
total_pop_table(subdiv_2010, block_2010, 2010) 
```

### Map

```{r}
#| echo: false
total_pop_plot(subdiv_2010, block_2010, 2010) 
```

:::

## 2000

2000 is similar to 2010 in that it uses Summary File 1.

```{r}
#| code-fold: false

sf1_2000_vars <-
  tidycensus::load_variables(2000, "sf1") |>
  filter(
    concept %in% c(
      "HISPANIC OR LATINO, AND NOT HISPANIC OR LATINO BY RACE [73]", 
      "SEX BY AGE [49]"
    ),
    !name %in% c("P004003", "P004004", "P012001", "P012002", "P012026"),
    !str_detect(label, "Population of two or more races!!"),
    !str_detect(name, "^PCT013")
  )
```

```{r}
#| code-fold: true

sf1_2000_vars <-
  sf1_2000_vars |>
  mutate(
    label = str_remove(label, "(Total!!Male!!)|(Total!!Female!!)"),
    label = case_when(
      str_detect(label, "White") ~ "White",
      str_detect(label, "Black") ~ "Black",
      str_detect(label, "Asian") ~ "Asian",
      str_detect(label, "American Indian") ~ "American Indian",
      str_detect(label, "Native Hawaiian") ~ "Pacific Islander",
      str_detect(label, "Some Other Race") ~ "Other",
      str_detect(label, "Two or More Races") ~ "Two or more races",
      str_detect(label, "Hispanic") ~ "Hispanic",
      str_detect(label, "Total") ~ "Total",
      TRUE ~ label,
    ),
    rpt_group = case_when(
      name == "P004001" ~ "Total",
      between(name, "P004002", "P004011") ~ "Race/ethnicity",
      TRUE ~ "Age"
    ),
    rpt_level = case_when(
      label %in% c("White", "Black", "Hispanic", "Asian", "Total", "Other") ~ label,
      label %in% c("American Indian", "Pacific Islander", "Two or more races") ~ "Other",
      label %in% c("Under 5 years", "5 to 9 years", "10 to 14 years") ~ "Under 15 yrs",
      between(label, "15 to 17 years", "22 to 24 years") ~ "15 to 24 yrs",
      label %in% c("25 to 29 years", "30 to 34 years") ~ "25 to 34 yrs",
      label %in% c("35 to 39 years", "40 to 44 years") ~ "35 to 44 yrs",
      label %in% c("45 to 49 years", "50 to 54 years") ~ "45 to 54 yrs",
      between(label, "55 to 59 years", "62 to 64 years") ~ "55 to 64 yrs",
      between(label, "65 and 66 years", "85 years and over") ~ "65+ yrs"
    )
  ) |>
  select(variable = name, label, rpt_group, rpt_level)

sf1_2010_vars
```

Request the data from the API.

```{r}
#| code-fold: true
#| results: hide

downtown_core_tracts_2000 <- c(
  "107100", "107200", "107300", "107400", "107500", "107600", "107700",
  "107800", "107900", "109200")
  # "103300", "107101", "107701", "107802", "109301")
downtown_core_blocks_2000 <- 
  paste0("39035108701", c("3000", "3001", "3002", "3003", "3004"))

if (USE_API) {

  subdiv_2000_0 <- 
    get_decennial( 
      geography = "county subdivision",
      sumfile = "sf1",
      variables = sf1_2000_vars$variable,
      state = "OH",
      county = "Cuyahoga",
      geometry = FALSE, # no county subdivision geography in 2000
      year = 2000
    ) |> 
    inner_join(sf1_2000_vars, by = "variable") |>
    summarize(
      .by = c(GEOID, NAME, rpt_group, rpt_level),
      value = sum(value)
    ) |>
    mutate(
      rpt_level = my_rpt_relevel(rpt_level),
      NAME = str_remove_all(NAME, "(, Cuyahoga County, Ohio)|(village)|(city)"),
      NAME = str_trim(NAME)
    )
  
  # No geometry for 2000? No problem? I'll use the 2010 geometry and replace the 
  # values with 2000.
  subdiv_2000_1 <- 
    subdiv_2000_0 |> 
    as_tibble() |> 
    select(GEOID, rpt_group, rpt_level, value)
  
  subdiv_2000 <- 
    subdiv_2010 |>
    select(-value) |>
    inner_join(subdiv_2000_1, by = c("GEOID", "rpt_group", "rpt_level"))
  
  tract_2000 <- 
    get_decennial( 
      geography = "tract",
      sumfile = "sf1",
      variables = sf1_2000_vars$variable,
      state = "OH",
      county = "Cuyahoga",
      geometry = TRUE, 
      year = 2000
    ) |> 
    inner_join(sf1_2000_vars, by = "variable") |>
    summarize(
      .by = c(GEOID, NAME, geometry, rpt_group, rpt_level),
      value = sum(value)
    ) |>
    mutate(rpt_level = my_rpt_relevel(rpt_level))

  block_2000_0 <- 
    get_decennial( 
      geography = "block",
      sumfile = "sf1",
      variables = sf1_2000_vars$variable,
      state = "OH",
      county = "Cuyahoga",
      geometry = TRUE, 
      year = 2000
    ) |> 
    inner_join(sf1_2000_vars, by = "variable") |>
    summarize(
      .by = c(GEOID, NAME, geometry, rpt_group, rpt_level),
      value = sum(value)
    ) |>
    mutate(rpt_level = my_rpt_relevel(rpt_level))

  block_2000 <-
    st_join(cleve_neigh, st_centroid(block_2000_0), join = st_contains) |>
    mutate(
      rpt_level = my_rpt_relevel(rpt_level),
      greater_downtown = case_when(
        str_sub(GEOID, 6, 11) %in% westside_tracts ~ "Westside",
        str_sub(GEOID, 6, 11) %in% downtown_core_tracts_2000 ~ "Downtown Core",
        GEOID %in% downtown_core_blocks_2000 ~ "Downtown Core",
        TRUE ~ "Other"
      ),
      SPA = factor(str_to_title(SPA)),
      SPA = fct_relevel(SPA, "Downtown", after = 0),
      greater_downtown = factor(
        greater_downtown, levels = c("Downtown Core", "Westside", "Other"))
    ) |>
    select(GEOID, NAME, geometry, rpt_group, rpt_level, value, SPA, greater_downtown)
  
  save(
    subdiv_2000, tract_2000, block_2000,
    file = "decennial_2000.Rdata"
  )

} else {
  
  load("decennial_2000.Rdata")
  
}
```

We have the same problem as 2010 - the sum of the neighborhoods, 477,107, didn't quite roll match the city, 478,403. 

Wow, Cleveland's population was 478,403 in 2000 - that's a 100K more than today! It sure has dropped a lot over the last two decades. On the other hand, only 6,310 people lived downtown. The resurgence of Downtown does not seem to be a recent phenomena.

::: panel-tabset

### Table

```{r}
#| echo: false
total_pop_table(subdiv_2000, block_2000, 2000) 
```

### Map

```{r}
#| echo: false
total_pop_plot(subdiv_2000, block_2000, 2000) 
```

:::

## 2023 (ACS)

The 2023 American Community Survey publishes a 1-year and 5-year average. We'll grab the 1-year to get the latest population figures.

```{r}
#| code-fold: false

acs1_2023_vars <-
  tidycensus::load_variables(2023, "acs1") |>
  filter(
    concept %in% c("Sex by Age", "Hispanic or Latino Origin by Race"),
    # between(name, "B01001_001E_001N", "P2_011N"),
    !name %in% c("B01001_002", "B01001_026", "B03002_001", "B03002_002",
                 "B03002_010", "B03002_011"),
    name <= "B03002_012"
  )
```

```{r}
#| code-fold: true

acs1_2023_vars <-
  acs1_2023_vars |>
  mutate(
    label = str_remove_all(label, "(Estimate!!Total:!!)|(Male:!!)|(Female:!!)"),
    label = case_when(
      str_detect(label, "White") ~ "White",
      str_detect(label, "Black") ~ "Black",
      str_detect(label, "Asian") ~ "Asian",
      str_detect(label, "American Indian") ~ "American Indian",
      str_detect(label, "Native Hawaiian") ~ "Pacific Islander",
      str_detect(label, "Some other race") ~ "Other",
      str_detect(label, "Two or more races") ~ "Two or more races",
      str_detect(label, "Hispanic") ~ "Hispanic",
      str_detect(label, "Total") ~ "Total",
      TRUE ~ label,
    ),
    rpt_group = case_when(
      name == "B01001_001" ~ "Total",
      between(name, "B03002_003", "B03002_012") ~ "Race/ethnicity",
      TRUE ~ "Age"
    ),
    rpt_level = case_when(
      label %in% c("White", "Black", "Hispanic", "Asian", "Total", "Other") ~ label,
      label %in% c("American Indian", "Pacific Islander", "Two or more races") ~ "Other",
      label %in% c("Under 5 years", "5 to 9 years", "10 to 14 years") ~ "Under 15 yrs",
      between(label, "15 to 17 years", "22 to 24 years") ~ "15 to 24 yrs",
      label %in% c("25 to 29 years", "30 to 34 years") ~ "25 to 34 yrs",
      label %in% c("35 to 39 years", "40 to 44 years") ~ "35 to 44 yrs",
      label %in% c("45 to 49 years", "50 to 54 years") ~ "45 to 54 yrs",
      between(label, "55 to 59 years", "62 to 64 years") ~ "55 to 64 yrs",
      between(label, "65 and 66 years", "85 years and over") ~ "65+ yrs"
    )
  ) |>
  select(variable = name, label, rpt_group, rpt_level)

acs1_2023_vars
```

Request the data from the API.

```{r}
#| code-fold: true
#| results: hide

if (USE_API) {

  subdiv_2023 <- 
    get_acs( 
      geography = "county subdivision",
      sumfile = "acs1",
      variables = acs1_2023_vars$variable,
      state = "OH",
      county = "Cuyahoga",
      geometry = FALSE, # no geo file for ACS-1yr
      year = 2023
    ) |> 
    inner_join(acs1_2023_vars, by = "variable") |>
    summarize(
      .by = c(GEOID, NAME, rpt_group, rpt_level),
      value = sum(estimate)
    ) |>
    mutate(
      rpt_level = my_rpt_relevel(rpt_level),
      NAME = str_remove_all(NAME, "(, Cuyahoga County, Ohio)|(village)|(city)"),
      NAME = str_trim(NAME)
    )
  
  tract_2023 <- 
    get_acs( 
      geography = "tract",
      sumfile = "acs1",
      variables = acs1_2023_vars$variable,
      state = "OH",
      county = "Cuyahoga",
      geometry = FALSE, 
      year = 2023
    ) |> 
    inner_join(acs1_2023_vars, by = "variable") |>
    summarize(
      .by = c(GEOID, NAME, rpt_group, rpt_level),
      value = sum(estimate)
    ) |>
    mutate(rpt_level = my_rpt_relevel(rpt_level))

  save(
    subdiv_2023, tract_2023,
    file = "acs1yr_2023.Rdata"
  )

} else {
  
  load("acs1yr_2023.Rdata")
  
}
```

Cleveland's population has continued to decline, down from 372,624 in 2020 to 367,523. The ACS does not have block-level data, so I can't do the neighborhood breakdown here. 

But look at Downtown - it's continued to increase.

```{r}
#| echo: false

subdiv_2023 |>
  as_tibble() |>
  filter(rpt_level == "Total", value > 0) |>
  mutate(subgrp = if_else(NAME == "Cleveland", NAME, "Other")) |>
  summarize(.by = subgrp, pop = sum(value)) |>
  arrange(subgrp) |>
  janitor::adorn_totals() |>
  gt() |>
  gt::fmt_number(columns = pop, decimals = 0) |>
  gt::tab_header(
    glue("2023 Population Estimates for Cleveland and Vicinity")
  ) |>
  gt::tab_style(
    style = cell_text(color = "firebrick4"),
    locations = cells_body(rows = str_detect(subgrp, "(Cleveland)|(Downtown)"))
  ) |>
  gt::tab_style(
    style = cell_text(weight = "bold"),
    locations = cells_body(rows = subgrp == "Total")
  ) |>
  gt::cols_label(subgrp = "", pop = "Population")
```

```{r eval=FALSE}
#| results: hide

# 34 features (neighborhoods).
hood_shp <-
  st_read("Cleveland_Neighborhoods/Cleveland_Neighborhoods.shp") |>
  st_make_valid() |>
  st_transform(st_crs(tract_2000))

hood_2023 <- 
  tract_2023 |>
  inner_join(hood_2020 |> select(GEOID, SPANM) |> unique(), by = "GEOID")

hood_shp <- 
  st_read("Cleveland_Neighborhoods/Cleveland_Neighborhoods.shp") |>
  st_make_valid() |>
  st_transform(st_crs(tract_2000))

hood_2000 <- st_join(hood_shp, st_centroid(tract_2000), join = st_contains)
```

# Population Trends

Downtown Cleveland Inc. defined "Greater Downtown Cleveland" in their report as the "Downtown Core" on the east side of the Cuyahoga and "Westside" to west. Their Downtown Core is bounded by about E. 30th St. and Woodland Ave to the South.[^8]. The Westside is bounded mostly by W. 65th St and Clark Avenue to the south. I'm not sure how they came up with this definition. Maybe it was with census blocks. Their Greater Downtown includes 37,115 people with 18,708 in the Downtown Core. I'll stick with the neighborhoods definition.

[^8]: There is a map on page 3 of their [report](https://static1.squarespace.com/static/645ba4265ac81f7c3a42f05d/t/6491ab0e8821d157e67c6f24/1687268112978/Downtown%2BCLE%2BMarket%2BStudy%2B2023.pdf).

Let's start with a neighborhood table showing the population changes since 2000. The Downtown population was only 8,227 in 2000 - `r percent(8227/478403, 1)` of Cleveland's 478,403 population. Cleveland's population fell `r percent((478403-396815)/478403, 1)` over the next decade. Hit hardest the east side neighborhoods such as Buckeye-Woodhill, Glenville, Kinsman, Lee-Seville, and St.Clair-Superior, all of which lost over 30% of their population. However, Downtown experienced a 15% population *increase* over this period.

```{r}
#| echo: false

subdiv_long <- bind_rows(
  `2000` = subdiv_2000 |> as_tibble() |>
    summarize(.by = c(NAME, rpt_group, rpt_level), value = sum(value)),
  `2010` = subdiv_2010 |> as_tibble() |>
    summarize(.by = c(NAME, rpt_group, rpt_level), value = sum(value)),
  `2020` = subdiv_2020 |> as_tibble() |>
    summarize(.by = c(NAME, rpt_group, rpt_level), value = sum(value)),
  `2023` = subdiv_2023 |> as_tibble() |>
    summarize(.by = c(NAME, rpt_group, rpt_level), value = sum(value)),
  .id = "yr"
) |>
  rename(SPANM = NAME)

subdiv_wide_0 <-
  subdiv_long |>
  rename(pop = value, SPA = SPANM) |>
  mutate(.by = c(yr, SPA, rpt_group), grp = pop / sum(pop)) |>
  pivot_wider(names_from = yr, values_from = c(pop, grp))

subdiv_wide <-
  subdiv_2010 |>
  rename(SPA = NAME) |>
  select(-value) |>
  inner_join(subdiv_wide_0, by = c("SPA", "rpt_group", "rpt_level")) |>
  mutate(
    d10 = pop_2010 - pop_2000,
    p10 = d10 / pop_2000,
    d20 = pop_2020 - pop_2010,
    p20 = d20 / pop_2010,
    d23 = pop_2023 - pop_2020,
    p23 = d23 / pop_2020,
    tt = glue(
      "{rpt_level} in {SPA}\n\n",
      "2010: {comma(pop_2010)}\n",
      "2020: {comma(pop_2020)}, {if_else(p20>0,'+','')}{percent(p20, 1)}\n",
      "2023: {comma(pop_2023)}, {if_else(p23>0,'+','')}{percent(p23, 1)}\n",
    )
  ) 

# Repeat with neighborhoods.

neigh_long <- bind_rows(
  `2000` = block_2000 |> as_tibble() |> 
    summarize(.by = c(SPA, rpt_group, rpt_level), value = sum(value)),
  `2010` = block_2010 |> as_tibble() |> 
    summarize(.by = c(SPA, rpt_group, rpt_level), value = sum(value)),
  `2020` = block_2020 |> as_tibble() |> 
    summarize(.by = c(SPA, rpt_group, rpt_level), value = sum(value)),
  .id = "yr"
)

neigh_wide_0 <-
  neigh_long |>
  rename(pop = value) |>
  mutate(.by = c(yr, SPA, rpt_group), grp = pop / sum(pop)) |>
  pivot_wider(names_from = yr, values_from = c(pop, grp))

neigh_wide <-
  cleve_neigh |> 
  inner_join(neigh_wide_0, by = c("SPA")) |>
  mutate(
    d10 = pop_2010 - pop_2000,
    p10 = d10 / pop_2000,
    d20 = pop_2020 - pop_2010,
    p20 = d20 / pop_2010,
    tt = glue(
      "{SPA}\n{rpt_level} Population\n\n",
      "2000: {comma(pop_2000)}\n",
      "2010: {comma(pop_2010)}, {if_else(p10>0,'+','')}{percent(p10, 1)}\n",
      "2020: {comma(pop_2020)}, {if_else(p20>0,'+','')}{percent(p20, 1)}\n"
    )
  ) 

plot_neigh <- function(.rpt_group, .rpt_level, fill_var, yrs) {
  p <-
    neigh_wide |>
    filter(rpt_group == .rpt_group, rpt_level == .rpt_level) |>
    ggplot() +
    geom_sf(data = oh_state, color = "gray60") +
    geom_sf_interactive(
      data = oh_counties, aes(tooltip = NAME),
      fill = "honeydew", color = "gray90"
    ) +
    geom_sf_interactive(aes(fill = {{fill_var}}, tooltip = tt), show.legend = FALSE) +
    scale_fill_gradient2(
      low = "firebrick", mid = "white", high = "dodgerblue", midpoint = 0
    ) +
    coord_sf(xlim = c(-81.9, -81.5), ylim = c(41.37, 41.62)) +
    theme(
      panel.background = element_rect(fill = "skyblue"),
      panel.grid = element_blank(),
    axis.text = element_blank()
    ) +
    labs(
      title = glue("Population Changes, {yrs}")
    )
  
  girafe(ggobj = p)
}
```

::: panel-tabset
## 2000 - 2010

```{r}
#| echo: false

plot_neigh("Total", "Total", d10, "2000 - 2010")
```

## 2010 - 2020

```{r}
#| echo: false

plot_neigh("Total", "Total", d20, "2010 - 2020")
```

## 2020 - 2023

```{r}
#| echo: false

plot_neigh("Total", "Total", d10, "2000 - 2010")
```

## Table

```{r}
#| code-fold: true
#| echo: false

neigh_gt <- function(.rpt_group, .rpt_level) {
  bind_rows(
    neigh_wide |> 
      filter(rpt_group == .rpt_group, rpt_level == .rpt_level) |>
      as_tibble() |>
      slice_head(n = 1, by = c(rpt_group, rpt_level, SPA)),
    subdiv_wide |>
      filter(SPA == "Cleveland", rpt_group == .rpt_group, rpt_level == .rpt_level) |>
      mutate(SPA = "Total")
  ) |>
  # pivot_wider(names_from = yr, values_from = value) |>
  # mutate(
  #   d10 = `2010` - `2000`,
  #   p10 = d10 / `2000`,
  #   d20 = `2020` - `2010`,
  #   p20 = d20 / `2010`,
  #   d23 = `2023` - `2020`,
  #   p23 = d23 / `2020`
  # ) |>
  select(SPA, `pop_2000`, `pop_2010`, d10, p10, `pop_2020`, d20, p20, `pop_2023`, d23, p23) |>
  mutate(
    SPA = factor(SPA),
    SPA = fct_relevel(SPA, "Total", after = Inf)
  ) |>
  arrange(SPA) |>
  gt::gt() |>
  gt::fmt_number(c(2, 3, 4, 6, 7, 9, 10), decimals = 0) |>
  gt::fmt_percent(c(5, 8, 11), decimals = 0) |>
  gt::tab_style(
    style = cell_text(color = "firebrick4"),
    locations = cells_body(columns = c(d10, p10), rows = d10 < 0)
  ) |>
  gt::tab_style(
    style = cell_text(color = "firebrick4"),
    locations = cells_body(columns = c(d20, p10), rows = d20 < 0)
  ) |>
  gt::tab_style(
    style = cell_text(color = "firebrick4"),
    locations = cells_body(columns = c(d23, p23), rows = d23 < 0)
  ) |>
  gt::tab_style(
    style = cell_fill(color = "darkseagreen1"),
    locations = cells_body(rows = SPA == "Downtown")
  ) |>
  gt::tab_style(
    style = cell_text(weight = "bold"),
    locations = cells_body(rows = SPA == "Total")
  ) |>
  gt::cols_align("left", 1) |>
  gt::cols_label(
    pop_2000 = "2000", pop_2010 = "2010", pop_2020 = "2020", pop_2023 = "2023",
    SPA = "",
    d10 = htmltools::HTML("&Delta;"),
    p10 = "%",
    d20 = htmltools::HTML("&Delta;"),
    p20 = "%",
    d23 = htmltools::HTML("&Delta;"),
    p23 = "%"
  ) |>
  gt::tab_style(
    style = cell_borders("right", "gray80"),
    locations = cells_body(columns = c(1, 2, 5, 8))
  ) |>
  gt::tab_header(
    glue("Changing {.rpt_level} Population in Cleveland, 2000-2023"),
    "Decennial and ACS censuses"
  ) |>
  gt::tab_options(
    heading.align = "left"
  )
}

neigh_gt("Total", "Total")
```
:::

# Race/ethnicity

::::::: panel-tabset
## Black

::: panel-tabset
### 2000 - 2010

```{r}
#| echo: false

plot_neigh("Race/ethnicity", "Black", d10, "2000 - 2010")
```

### 2010 - 2020

```{r}
#| echo: false

plot_neigh("Race/ethnicity", "Black", d20, "2010 - 2020")
```

### Table

```{r}
neigh_gt("Race/ethnicity", "Black")
```
:::

## White

::: panel-tabset
### 2000 - 2010

```{r}
#| echo: false

plot_neigh("Race/ethnicity", "White", d10, "2000 - 2010")
```

### 2010 - 2020

```{r}
#| echo: false

plot_neigh("Race/ethnicity", "White", d20, "2010 - 2020")
```

### Table

```{r}
neigh_gt("Race/ethnicity", "White")
```
:::

## Hispanic

::: panel-tabset
### 2000 - 2010

```{r}
#| echo: false

plot_neigh("Race/ethnicity", "Hispanic", d10, "2000 - 2010")
```

### 2010 - 2020

```{r}
#| echo: false

plot_neigh("Race/ethnicity", "Hispanic", d20, "2010 - 2020")
```

### Table

```{r}
neigh_gt("Race/ethnicity", "Hispanic")
```
:::

## Asian

::: panel-tabset
### 2000 - 2010

```{r}
#| echo: false

plot_neigh("Race/ethnicity", "Asian", d10, "2000 - 2010")
```

### 2010 - 2020

```{r}
#| echo: false

plot_neigh("Race/ethnicity", "Asian", d20, "2010 - 2020")
```

### Table

```{r}
neigh_gt("Race/ethnicity", "Asian")
```
:::
:::::::

# Age

:::::::::: panel-tabset
## Under 15 yrs

::: panel-tabset
### 2000 - 2010

```{r}
#| echo: false
plot_neigh("Age", "Under 15 yrs", d10, "2000 - 2010")
```

### 2010 - 2020

```{r}
#| echo: false
plot_neigh("Age", "Under 15 yrs", d20, "2010 - 2020")
```

### Table

```{r}
#| echo: false
neigh_gt("Age", "Under 15 yrs")
```
:::

## 15 to 24 yrs

::: panel-tabset
### 2000 - 2010

```{r}
#| echo: false
plot_neigh("Age", "15 to 24 yrs", d10, "2000 - 2010")
```

### 2010 - 2020

```{r}
#| echo: false
plot_neigh("Age", "15 to 24 yrs", d20, "2010 - 2020")
```

### Table

```{r}
#| echo: false
neigh_gt("Age", "15 to 24 yrs")
```
:::

## 25 to 34 yrs

::: panel-tabset
### 2000 - 2010

```{r}
#| echo: false
plot_neigh("Age", "25 to 34 yrs", d10, "2000 - 2010")
```

### 2010 - 2020

```{r}
#| echo: false
plot_neigh("Age", "25 to 34 yrs", d20, "2010 - 2020")
```

### Table

```{r}
#| echo: false
neigh_gt("Age", "25 to 34 yrs")
```
:::

## 35 to 44 yrs

::: panel-tabset
### 2000 - 2010

```{r}
#| echo: false
plot_neigh("Age", "35 to 44 yrs", d10, "2000 - 2010")
```

### 2010 - 2020

```{r}
#| echo: false
plot_neigh("Age", "35 to 44 yrs", d20, "2010 - 2020")
```

### Table

```{r}
#| echo: false
neigh_gt("Age", "35 to 44 yrs")
```
:::

## 45 to 54 yrs

::: panel-tabset
### 2000 - 2010

```{r}
#| echo: false
plot_neigh("Age", "45 to 54 yrs", d10, "2000 - 2010")
```

### 2010 - 2020

```{r}
#| echo: false
plot_neigh("Age", "45 to 54 yrs", d20, "2010 - 2020")
```

### Table

```{r}
#| echo: false
neigh_gt("Age", "45 to 54 yrs")
```
:::

## 55 to 64 yrs

::: panel-tabset
### 2000 - 2010

```{r}
#| echo: false
plot_neigh("Age", "55 to 64 yrs", d10, "2000 - 2010")
```

### 2010 - 2020

```{r}
#| echo: false
plot_neigh("Age", "55 to 64 yrs", d20, "2010 - 2020")
```

### Table

```{r}
#| echo: false
neigh_gt("Age", "55 to 64 yrs")
```
:::

## 65+ yr

::: panel-tabset
### 2000 - 2010

```{r}
#| echo: false
plot_neigh("Age", "65+ yr", d10, "2000 - 2010")
```

### 2010 - 2020

```{r}
#| echo: false
plot_neigh("Age", "65+ yr", d20, "2010 - 2020")
```

### Table

```{r}
#| echo: false
neigh_gt("Age", "65+ yr")
```
:::
::::::::::


```{r}
#| eval: false
#| include: false

# cuya_roads <- tigris::roads("OH", "Cuyahoga", 2022, class = "sf")
# cuya_roads <- tigris::primary_roads("OH", "Cuyahoga", 2022, class = "sf")
# cuya_roads <- tigris::primary_secondary_roads("OH", 2022, class = "sf")

# cuya_rivers <- tigris::linear_water(state = "OH", county = "Cuyahoga", 2019, class = "sf")

# cuya_blocks <- st_read(file.path(
#   "inputs/Cuyahoga Blocks 2010",
#   "Decennial_2010_Blocks_Cuyahoga.shp"
# ))
# 
# blocks_2020 <- st_read(file.path(
#   "inputs/Cuyahoga Blocks 2020",
#   "Decennial_2020_Blocks_Cuyahoga.shp"
# ))

# cleve_neighborhoods <-
#   cleve_blocks |>
#   summarize(.by = SPA_NAME, geometry = st_union(geometry))

```

```{r}

  
my_split_gt <- function(x, .rpt_group, .var_name, .var_val, .spanner, .title, .year) {
  x |>
    filter(rpt_group == .rpt_group) |>
    mutate(geo = if_else(!!ensym(.var_name) == .var_val, "MAIN", "Other")) |>
    mutate(.by = geo, pct = value / sum(value)) |>
    as_tibble() |>
    summarize(.by = c(geo, rpt_level), across(c(value, pct), sum)) |>
    pivot_wider(names_from = geo, values_from = c(value, pct)) |>
    arrange(rpt_level) |>
    mutate(
      rpt_level = fct_drop(rpt_level),
      value_Total = value_MAIN + value_Other,
      pct_Total = value_Total / sum(value_Total)
    ) |>
    janitor::adorn_totals() |>
    select(
      rpt_level, ends_with("MAIN"), ends_with("Other"), ends_with("Total")
    ) |>
    gt() |>
    gt::cols_align("left", 1) |>
    gt::fmt_number(columns = c(2, 4, 6), decimals = 0) |>
    gt::fmt_percent(columns = c(3, 5, 7), decimals = 1) |>
    gt::tab_spanner(.spanner, 2:3) |>
    gt::tab_spanner("Other", 4:5) |>
    gt::tab_spanner("Total", 6:7) |>
    gt::cols_label(
      rpt_level = "", starts_with("value") ~ "Est.", starts_with("pct") ~ "%"
    ) |>
    gt::tab_header(
      glue("{.title} Population, {.year}"),
      glue("by {.rpt_group}")
    ) |>
    gt::tab_options(heading.align = "left") 
}

```

