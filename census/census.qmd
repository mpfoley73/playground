---
title: "Cleveland's Changing Population"
subtitle: "Exploring the US Census with R"
date: "`r Sys.Date()`"
format:
  html:
    embed-resources: true
    # css: style.css
    toc: true
    toc_depth: 3
    toc-title: "Content"
    toc-location: left
    theme: 
      light: sandstone
      dark: darkly
    code-fold: show
    code-summary: "Show the code"
  # docx:
  #   reference-doc: "hunger-network-reference.docx"
editor: source
editor_options: 
  chunk_output_type: console
execute:
  echo: true
  message: false
  warning: false
---

The resurgence of people moving to downtown Cleveland is making news.[^1] According to a study commissioned by Downtown Cleveland Inc., the downtown population was almost 19,000 in the 2020 census, a 22% increase from 2010.[^2] However, Cleveland Open Data shows only 13,000[^3]. Cleveland Scene reports that there are lots of estimates out there, one as low as 8,000![^4] What gives? The organizations may be using different sources, like the decennial US census vs the more recent, but less comprehensive, American Community Survey. But it seems more likely they are using different geographic boundaries.

[^1]: ["Opinion: Downtown Cleveland's strategy to broaden appeal sees success"](https://www.crainscleveland.com/crains-forum-population-growth/downtown-cleveland-strategy-revitalize-finds-some-success), Crains Cleveland Business. ["Clevelandâ€™s downtown population continues to surge"](https://www.cleveland19.com/2024/11/15/clevelands-downtown-population-continues-surge/), Cleveland Fox 19 News.

[^2]: [Downtown Cleveland Inc.](https://www.downtowncleveland.com/research) commissioned a report, ["Downtown Cleveland Market Study Report"](https://static1.squarespace.com/static/645ba4265ac81f7c3a42f05d/t/6491ab0e8821d157e67c6f24/1687268112978/Downtown%2BCLE%2BMarket%2BStudy%2B2023.pdf) (pdf), by the Urban Partners consulting firm. The report was released in Apr 2023. Figures are from Table 1: 15,330 people in 2010, 18,708 people in 2020 (`r scales::percent(18708/15330-1, 1)` increase).

[^3]: See the Downtown neighborhood (statistical processing area, SPA) in the [data table](https://data.clevelandohio.gov/datasets/ClevelandGIS::census-2020-analysis/explore?layer=0&location=41.454326%2C-81.671523%2C10.98&showTable=true).

[^4]: ["There's Still No Agreement on How Many Clevelanders Actually Live Downtown"](https://www.clevescene.com/news/theres-still-no-agreement-on-how-many-clevelanders-actually-live-downtown-45115341), Cleveland Scene, Sep 17, 2024.

I was able to reproduce some estimates. My main tools to do this were the **tidycensus** R package for US Census data, and the Cleveland Open Data service for Cleveland neighborhood definitions. I'll step through the process below.

::: callout-note
This is a work file / tutorial. Researching Cleveland's population is mostly a toy project to experiment with R tools that work with APIs. This should come in handy for some future project. If you are not me, I hope this helps with whatever you're doing. Otherwise, 'hello, future me!' You can find the source code and downloaded data on my [GitHub page](https://github.com/mpfoley73/playground/tree/master/census).
:::

# Defining "Downtown"

Cleveland extends from Cleveland Hopkins Airport on the west all the way to Euclid on the east. It's mostly bounded on the south by I-80. Here is the map from the [Cleveland Wikipedia Page](https://en.wikipedia.org/wiki/Cleveland).

[![Screen capture from Cleveland article on Wikipedia.](inputs/wikipedia_cleveland.png)](https://en.wikipedia.org/wiki/Cleveland)

The 2020 US decennial census counted 372K people in Cleveland.[^5] That's a *decline* from 397K in 2010. The 1-year American Community Survey (ACS) shows it is still falling, down to 363K in 2023.[^6] But the decline is uneven, and parts of the city are actually growing, including the downtown area. There is no official definition of downtown, so we can make some choices. The Census Bureau provides the building blocks for a definition: over 15K census blocks in Cleveland, rolled up to around 200 census tracts.

[^5]: Cleveland's population plateaued around 1930 at 900K. The peak was 914K in the 1950 census. Between 1960 and 1980 the population declined by a third. The current population is slightly below the 1900 value. See Visual Cleveland at https://visual.clevelandhistory.org/census/.

[^6]: 362,670 +/- 62. https://data.census.gov/table/ACSST1Y2023.S0101?q=cleveland,%20oh

Cleveland's City Planning Commission (CPC) defines 34 neighborhoods for urban planning initiatives.[^7] They are commonly referred to Statistical (or Social) Planning Areas (SPAs). I pasted a [pdf map](https://planning.clevelandohio.gov/2010census/downloads/SPAs.pdf) from the CPC below. You can see there is an SPA actually named "Downtown". It's bounded by the Cuyahoga River and I-90. Cleveland Open Data has an [interactive map](https://data.clevelandohio.gov/datasets/b2a2da54401a41e78dd71563f01f5273_0/explore?location=41.494849%2C-81.705800%2C11.82) that you can explore and download. I downloaded and extracted its shapefile to my local drive.

[^7]: Social Planning Areas (SPAs) were developed in the 1950s to coordinate social services at the neighborhood level. Learn more at the [Encyclopedia of Cleveland History](https://case.edu/ech/articles/s/social-planning-areas). [Wikipedia](https://en.wikipedia.org/wiki/Neighborhoods_in_Cleveland) has a nice explanation of how neighborhoods relate to Statistical (or social) Planning Areas.

[![Screen capture from City Planning Commission 2010 Census pdf.](inputs/cleveland_spa.png)](https://planning.clevelandohio.gov/2010census/downloads/SPAs.pdf)

So that is one definition. A second one comes from a study by Urban Partners that was commission by [Downtown Cleveland, Inc.](https://www.downtowncleveland.com/) in 2023. Page 3 of the [pdf report](https://static1.squarespace.com/static/645ba4265ac81f7c3a42f05d/t/6491ab0e8821d157e67c6f24/1687268112978/Downtown%2BCLE%2BMarket%2BStudy%2B2023.pdf) (copy/pasted below) shows a *Westside* and a *Downtown Core*. Whereas the Downtown SPA had about 13.3K people in the 2020 census, this *Downtown Core* had 18.7K people. The main differences are that Urban Partners took a bite out of the Central neighborhood on the east side, and parts of the West Bank of the Flats in the Cuyahoga Valley and Ohio City neighborhoods on the west side.

[![Downtown Cleveland Market Study Report, p3. Urban Partners.](inputs/urban_planners_downtown.png)](https://static1.squarespace.com/static/645ba4265ac81f7c3a42f05d/t/6491ab0e8821d157e67c6f24/1687268112978/Downtown%2BCLE%2BMarket%2BStudy%2B2023.pdf)

# Blocks, Tracts, and Subdivisions

Let's gather the materials to segment population estimates into these boundaries. Several R libraries make it easy to work with census data. The **tidycencus** package was developed to interface with the US Census Bureau APIs. It also returns feature geometries for spatial analysis. The **tigris** package works with the Census Bureau's TIGER/Line shape files, and the **sf** (simple features) package performs spatial operations.

```{r}
#| label: setup
#| results: hide
#| code-fold: false

library(tidyverse)
library(glue)
library(scales)
library(gt)
library(ggiraph)  # interactive plots

library(tidycensus)
library(tigris) # TIGER/Line shapefiles
library(sf)  # simple features for spatial analysis
```

Let's get the CPC's definition of neighborhoods. I went to the [City of Cleveland Open Data](https://data.clevelandohio.gov/) web site and and navigated to their [analysis of the 2020 US Census](https://data.clevelandohio.gov/maps/25f6cdc173774df594b4db4f8aa98926).[^8] There interactive map has five layers (screen capture below). The first is the shape file of the 34 neighborhoods (SPAs). The second file contains population data from the 2020 decennial census complete with census block, census tract, and SPA. I downloaded and unzipped the first two files. Now I have a way to map the SPA boundaries within Cleveland, and I have a mapping of census blocks to SPAs so I can join this to the US Census data.

[^8]: From https://data.clevelandohio.gov/, go to the [Data Catalog](https://data.clevelandohio.gov/search?collection=Dataset) and scroll to [Census 2020 Analysis](https://data.clevelandohio.gov/maps/25f6cdc173774df594b4db4f8aa98926).

[![Screen capture from Open Data](inputs/open_data_files.png)](https://data.clevelandohio.gov/maps/25f6cdc173774df594b4db4f8aa98926/about)

```{r}
#| label: tigris
#| results: hide
#| code-fold: false

# Nice contiguous shape file. One record for each of the 34 SPAs.
cleve_neigh_0 <-
  st_read(file.path(
  "inputs/Cleveland Neighborhoods",
  "Neighborhood_Population_Change.shp"
))

# Cleveland populated blocks. Includes block, tract, and SPA name.
cleve_blocks <- st_read(file.path(
  "inputs/Cleveland Populated Blocks 2020",
  "Decennial_2020_Populated_Blocks_Cleveland_Only.shp"
)) |>
  select(-starts_with("P0"), -starts_with("H0"))
```

I could just join `cleve_neigh_0` to US Census Bureau data files by the geography elements using the **sf** package. I know exactly which blocks belong in each SPA for 2020, but block definitions change across censuses, so joining to `cleve_neigh_0` will get me the 2000 and 2010 figures. The shape file may not be perfectly precise because I can't quite match quoted population estimates for 2000 and 2010, but it's close.

Load shape files using the **tigris** package to facilitate mapping. I'll get the state, county boundaries, and a few cities. I also got the Terminal town coordinates from Google. I don't want to abuse the US Census Bureau website and API, so I'll set a flag to only download data as I'm developing this script. Once I have what I want, I'll keep my data on my local drive and build my report.

```{r}
#| code-fold: false

USE_API <- FALSE
```

```{r}
#| code-fold: false
#| message: false
#| warning: false
#| results: hide

if (USE_API) {
  oh_state <- tigris::states(cb = TRUE) |> filter(STUSPS == "OH") 
  oh_counties <- tigris::counties(cb = TRUE) |> filter(STUSPS == "OH")
  oh_places <- tigris::places("OH", year = 2024)
  save(oh_state, oh_counties, oh_places, file = "tigris_shapes.Rdata")
} else {
  load("tigris_shapes.Rdata")
}
```

Here is a plot of Cuyahoga County, Cleveland, and Cleveland's 34 SPAs. Hover over the shapes to see their names. The red dot is Terminal Tower in the heart of downtown. Progressive field is a few blocks away, and 7.0 miles from my home in Cleveland Heights.

```{r}
#| code-fold: true
#| warning: false

p <-
  ggplot() +
  geom_sf_interactive(data = oh_counties, 
                      aes(tooltip = paste(NAME, "County")), 
                      fill = "honeydew", color = "honeydew3") +
  geom_sf_interactive(data = oh_places, 
                      aes(tooltip = NAME), fill = "honeydew3", color = "honeydew") +
  geom_sf(data = oh_counties |> filter(NAME == "Cuyahoga"), 
          fill = NA, color = "honeydew4", linewidth = 1) +
  geom_sf_interactive(data = cleve_neigh_0,
                      aes(tooltip = SPA_NAME),
                      fill = "honeydew4", color = "honeydew3") +
  geom_sf_interactive(data = st_sfc(st_point(c(-81.69387, 41.49824)), crs = 4326), 
                      aes(tooltip = "Terminal Tower"),
                      size = 3, color = "firebrick") +
  geom_sf_text_interactive(data = oh_places, aes(label = NAME), 
                           check_overlap = TRUE, size = 2) +
  scale_x_continuous(limits = c(-82.0, -81.3)) +
  scale_y_continuous(limits = c(41.25, 41.65)) +
  theme(
    panel.background = element_rect(fill = "skyblue"),
    panel.grid = element_blank(),
    axis.text = element_blank()
  ) +
  labs(
    x = NULL, y = NULL, 
    title = glue("Cuyahoga County, Cleveland, and SPAs"),
    subtitle = "SPAs in dark sage. Terminal Tower in center of downtown in red."
  )

girafe(ggobj = p)
```

# Census Data

The Census Bureau API allows you to select multiple variables from a single census file. There are a few files for each census, and the variable names change. I want the Cleveland area population in 2000, 2010, 2020, and the American Community Survey (ACS) 1-year estimate from 2023 (most recent). So despite the handiness of **tidycensus** package, data collection is still going to be a bit tedious.

The [decennial census developer page](https://www.census.gov/data/developers/data-sets/decennial-census.html) lists the accessible datasets: 2000, 2010, and 2020. You need an API key from the Bureau before you can do anything. This is quick and easy: just click the "Request a KEY" tile in the menu at the left. The Census Bureau emails you a key. Best practice is to save the key in an .Renviron file.

``` r
usethis::edit_r_environ(scope = "project")
```

This opens (or creates) a .Renviron file in your project root. Add your key. The name is important: `CENSUS_API_KEY`. The **tidycensus** functions send that system variable (if you don't explicitly supply it in the function). Set it like this:

``` r
CENSUS_API_KEY="abc123"
```

Now you can pull census data. I'll start with 2020.

## 2020

The [decennial census developer page](https://www.census.gov/data/developers/data-sets/decennial-census.html) has several data files for each census. Through trial and error, I discovered **Redistricting Data (PL 94-171)** contains overall population. There is a full [list of variables](https://api.census.gov/data/2020/dec/pl/variables.html) that represent the various sub-groups of the population. I used it and the `tidycensus::load_variables()` function to identify the ones I want. I'll include race/ethnicity to investigate demographic trends.

```{r}
#| code-fold: false

pl_2020_vars <-
  tidycensus::load_variables(2020, "pl") |>
  filter(
    between(name, "P2_001N", "P2_011N"),
    !name %in% c("P2_003N", "P2_004N")
  )
```

Here they are after a bit of cleaning. I created `var_level` to group several infrequent values into "Other".

```{r}
#| code-fold: true

pl_2020_vars <- 
  pl_2020_vars |>
  mutate(
    var_detail = case_when(
      str_detect(label, "White") ~ "White",
      str_detect(label, "Black") ~ "Black",
      str_detect(label, "Asian") ~ "Asian",
      str_detect(label, "American Indian") ~ "American Indian",
      str_detect(label, "Native Hawaiian") ~ "Pacific Islander",
      str_detect(label, "Some Other Race") ~ "Some Other Race",
      str_detect(label, "two or more races") ~ "Two or more races",
      str_detect(label, "Hispanic") ~ "Hispanic",
      str_detect(label, "Total") ~ "Total",
      TRUE ~ label
    ),
    var_group = if_else(name == "P2_001N", "Total", "Race/ethnicity"),
    var_level = if_else(
      var_detail %in% c("White", "Black", "Hispanic", "Asian", "Total"),
      var_detail, "Other")
  ) |>
  select(variable = name, var_group, var_level, var_detail)

pl_2020_vars
```

The **Demographic Profile** contains age data.

```{r}
#| code-fold: false

dp_2020_vars <- 
  tidycensus::load_variables(2020, "dp") |>
  filter(
    str_detect(label, "Count!!SEX AND AGE!!Total population"),
    !str_detect(label, "Selected Age Categories"),
    name != "DP1_0001C"
  )
```

I'll ignore sex and aggregate the ages into ten-year buckets.

```{r}
#| code-fold: true

dp_2020_vars <- 
  dp_2020_vars |>
  mutate(
    var_detail = str_remove_all(label, "(Count!!SEX AND AGE!!Total population)|(!!)"),
    var_detail = if_else(var_detail == "", "Total", var_detail),
    var_group = "Age",
    var_level = case_when(
      name <= "DP1_0004C" ~ "Under 15 yrs",
      name <= "DP1_0006C" ~ "15 to 24 yrs",
      name <= "DP1_0008C" ~ "25 to 34 yrs",
      name <= "DP1_0010C" ~ "35 to 44 yrs",
      name <= "DP1_0012C" ~ "45 to 54 yrs",
      name <= "DP1_0014C" ~ "55 to 64 yrs",
      TRUE ~ "65+ yrs"
    )
  ) |>
  select(variable = name, var_group, var_level, var_detail)

dp_2020_vars
```

With the variables identified, request the data from the API. Cleveland is one of 59 subdivisions within Cuyahoga County. I'll download the subdivision data to get a total count for Cuyahoga County and for Cleveland. Counties are composed of census tracts, and census tracts are composed of census blocks. Cities overlap census tracts, so I'll download the block-level data and join to the `cleve_blocks` dataset from Cleveland Open Data. Urban Partners defined their *Downtown Core* and *Westside* areas by tract and some blocks from the *Central* SPA. I figured out which tracts and blocks by studying their map and swearing a lot.

```{r}
#| code-fold: true
#| results: hide

# Utility function to create factors
var_relevel <- function(x) {
  race_levels = c("Black", "White", "Hispanic", "Asian", "Other", "Total")
  ethn <- c("Black", "White", "Hispanic", "Asian", "Other", "Total")
  x <- fct_relevel(x, race_levels, after = Inf)
  x <- fct_relevel(x, "Under 15 yrs", after = 0)
  return(x)
}

# Urban Partners definitions of greater Cleveland uses tracts and blocks.
westside_tracts_2020 <- c(
  "103100", "103400", "103500", "103602", "103800", "103900", "104100", 
  "104200", "104300", "197800", "197700", "197500", "104400"
)
downtown_core_tracts_2020 <- c("103300", "107101", "107701", "107802", "109301")
downtown_core_blocks_2020 <- paste0("39035108701", c("2001", "2004", "2006", "2008"))

if (USE_API) {

  subdiv_2020_pl_detail <- 
    get_decennial( 
      geography = "county subdivision",
      sumfile = "pl",
      variables = pl_2020_vars$variable,
      state = "OH",
      county = "Cuyahoga",
      geometry = TRUE, 
      year = 2020
    ) |> 
    inner_join(pl_2020_vars, by = "variable")
  
  subdiv_2020_dp_detail <- 
    get_decennial( 
      geography = "county subdivision",
      sumfile = "dp",
      variables = dp_2020_vars$variable,
      state = "OH",
      county = "Cuyahoga",
      geometry = TRUE, 
      year = 2020
    ) |> 
    inner_join(dp_2020_vars, by = "variable")
  
  block_2020_pl_detail <- 
    get_decennial( 
      geography = "block",
      sumfile = "pl",
      variables = pl_2020_vars$variable,
      state = "OH",
      county = "Cuyahoga",
      geometry = TRUE, 
      year = 2020
    ) |> 
    inner_join(pl_2020_vars, by = "variable")
  
  # dp is not available at the block level
  # block_2020_dp_detail <- 
  #   get_decennial( 
  #     geography = "block",
  #     sumfile = "dp",
  #     variables = dp_2020_vars$variable,
  #     state = "OH",
  #     county = "Cuyahoga",
  #     geometry = TRUE, 
  #     year = 2020
  #   ) |> 
  #   inner_join(dp_2020_vars, by = "variable")

  # The "_detail" objects include the original levels for race/ethnicity and age.
   
  subdiv_2020_detail <- 
    bind_rows(subdiv_2020_pl_detail, subdiv_2020_dp_detail) |>
    mutate(
      var_level = var_relevel(var_level),
      NAME = str_remove_all(NAME, "(, Cuyahoga County, Ohio)|(village)|(city)"),
      NAME = str_trim(NAME)
    ) |>
    select(-variable) |>
    rename(geo_name = NAME) |>
    relocate(value, .after = var_detail)
           
  block_2020_detail <-
    block_2020_pl_detail |>
    inner_join(
      cleve_blocks |> as_tibble() |> select(GEOID20, SPA = SPA_NAME), 
      by = c("GEOID" = "GEOID20")
    ) |>
    mutate(
      var_level = var_relevel(var_level),
      greater_downtown = case_when(
        str_sub(GEOID, 6, 11) %in% westside_tracts_2020 ~ "Westside",
        str_sub(GEOID, 6, 11) %in% downtown_core_tracts_2020 ~ "Downtown Core",
        GEOID %in% downtown_core_blocks_2020 ~ "Downtown Core",
        TRUE ~ "Other"
      ),
      SPA = factor(str_to_title(SPA)),
      SPA = fct_relevel(SPA, "Downtown", after = 0),
      greater_downtown = factor(
        greater_downtown, levels = c("Downtown Core", "Westside", "Other"))
    ) |>
    select(-variable) |>
    rename(geo_name = NAME) |>
    relocate(value, .after = var_detail)

  # The non-_detail objects summarize by my grouped race/ethnicity and age.
  
  subdiv_2020 <- 
    subdiv_2020_detail |>
    summarize(
      .by = c(GEOID, geo_name, geometry, var_group, var_level),
      value = sum(value)
    )
  
  block_2020 <- 
    block_2020_detail |>
    summarize(
      .by = c(GEOID, geo_name, geometry, var_group, var_level, SPA, greater_downtown),
      value = sum(value)
    )
  
  save(
    subdiv_2020_detail, block_2020_detail, subdiv_2020, block_2020, 
    file = "decennial_2020.Rdata"
  )

} else {
  
  load("decennial_2020.Rdata")
  
}
```

```{r}
#| echo: false

# Transform Cleveland Neighborhoods coordinate system to match census.
cleve_neigh <- 
  cleve_neigh_0 |>
  st_make_valid() |>
  st_transform(st_crs(block_2020)) |>
  rename(SPA = SPA_NAME)

total_pop_table <- function(subdiv_yyyy, block_yyyy, yyyy) {

  by_subdiv <- 
    subdiv_yyyy |> 
    as_tibble() |>
    filter(var_level == "Total", value > 0) |>
    mutate(subgrp = if_else(geo_name == "Cleveland", geo_name, "Other")) |>
    summarize(.by = subgrp, pop = sum(value)) |>
    arrange(subgrp) |>
    janitor::adorn_totals()
  
  by_spa <-
    block_yyyy |>
    as_tibble() |>
    filter(var_level == "Total") |>
    summarize(.by = SPA, pop = sum(value)) |>
    arrange(SPA) |>
    rename(subgrp = SPA) |>
    janitor::adorn_totals()
  
  by_grtr <-
    block_yyyy |>
    as_tibble() |>
    filter(var_level == "Total") |>
    summarize(.by = greater_downtown, pop = sum(value)) |>
    arrange(greater_downtown) |>
    rename(subgrp = greater_downtown) |>
    janitor::adorn_totals()
  
  bind_rows(
    `Cuyahoga County Subdivisions` = by_subdiv,
    `Cleveland Neighborhoods` = by_spa,
    `Greater Downtown` = by_grtr,
    .id = "Grouping"
  ) |>
    group_by(Grouping) |>
    gt() |>
    gt::fmt_number(columns = pop, decimals = 0) |>
    gt::tab_header(
      glue("{yyyy} Population Estimates for Cleveland and Vicinity")
    ) |>
    gt::tab_style(
      style = cell_text(color = "firebrick4"),
      locations = cells_body(rows = str_detect(subgrp, "(Cleveland)|(Downtown)"))
    ) |>
    gt::tab_style(
      style = cell_fill(color = "honeydew2"),
      locations = cells_row_groups()
    ) |>
    gt::tab_style(
      style = cell_text(weight = "bold"),
      locations = cells_body(rows = subgrp == "Total")
    ) |>
    gt::cols_label(subgrp = "", pop = "Population")
}

total_pop_plot <- function(subdiv_yyyy, block_yyyy, yyyy) {
  
  subdiv_yyyy_total <- 
    subdiv_yyyy |>
    filter(var_group == "Total") |>
    mutate(tt = glue("{geo_name}\n{comma(value)}"))
  
  block_yyyy_total <- 
    block_yyyy |> 
    filter(var_group == "Total") |>
    as_tibble() |>
    select(SPA, value)

  neigh_yyyy_total <- 
    cleve_neigh |>
    # st_join(st_centroid(block_yyyy_total), join = st_contains) |>
    inner_join(block_yyyy_total, by = "SPA") |>
    summarize(.by = SPA, geometry = st_union(geometry), value = sum(value)) |>
    mutate(tt = glue("{SPA}\n{comma(value)}"))

  p <-
    ggplot() +
    geom_sf_interactive(data = oh_counties, 
                        aes(tooltip = paste(NAME, "County")), 
                        fill = "honeydew", color = "honeydew3") +
    geom_sf_interactive(data = oh_places, 
                        aes(tooltip = NAME), fill = "honeydew3", color = "honeydew") +
    geom_sf(data = oh_counties |> filter(NAME == "Cuyahoga"), 
            fill = NA, color = "honeydew4", linewidth = 1) +
    geom_sf_interactive(data = subdiv_yyyy_total,
                        aes(tooltip = tt),
                        fill = "honeydew3", color = "honeydew") +
    geom_sf_interactive(data = neigh_yyyy_total, #|> filter(SPA != "Downtown"),
                        aes(tooltip = tt, fill = value),
                        color = "honeydew4", show.legend = FALSE) +
    scale_x_continuous(limits = c(-82.0, -81.3)) +
    scale_y_continuous(limits = c(41.25, 41.65)) +
    scale_fill_gradient(low = "lightgoldenrod", high = "goldenrod") +
    theme(
      panel.background = element_rect(fill = "skyblue"),
      panel.grid = element_blank(),
      axis.text = element_blank()
    ) +
    labs(title = glue("Cleveland Popululation by SPA, {yyyy}"))

  girafe(ggobj = p)

}
```

The data is sliced three ways below. The top section of the table below is the subdivision data. Cuyahoga County has 1.3 million people with Cleveland's at 372,624. The second section groups the block-level data by SPA. The *Downtown* SPA had 13,302 people. This matches the [data table on Cleveland Open Data](https://data.clevelandohio.gov/datasets/ClevelandGIS::census-2020-analysis/explore?layer=0&location=41.454326%2C-81.671523%2C10.98&showTable=true). The *Downtown Core* defined by Urban Partners, which included portions of the *Central*, *Ohio City*, and *Cuyahoga Valley* SPAs, had 18,708 people.

The map on the second tab shows Cuyahoga County and all of its subdivisions. Cleveland is the largest, and each of its SPAs are broken out. The *Downtown* SPA is highlighted. The Urban Partners extensions to downtown aren't shown.

::: panel-tabset
### Table

```{r}
#| echo: false
total_pop_table(subdiv_2020, block_2020, 2020) 
```

### Map

```{r}
#| echo: false
total_pop_plot(subdiv_2020, block_2020, 2020) 
```
:::

## 2010

Unfortunately, pulling 2010 and 2000 isn't as simple as changing the year parameter in the API calls because they use a different file, **Summary File 1**.

```{r}
#| code-fold: false

sf1_2010_vars <-
  tidycensus::load_variables(2010, "sf1") |>
  filter(
    concept %in% c("HISPANIC OR LATINO ORIGIN BY RACE", "SEX BY AGE"),
    !name %in% c("P005002", "P012001", "P012002", "P012026"),
    !str_detect(label, "Total!!Hispanic or Latino!!"),
    !str_detect(name, "^PCT012")
  )
```

I'll prepare the variables the same way as with 2020. There are twice as many age variables this time because there is one variable for each sex.

```{r}
#| code-fold: true

sf1_2010_vars <-
  sf1_2010_vars |>
  mutate(
    label = str_remove(label, "(Total!!Male!!)|(Total!!Female!!)"),
    label = str_remove(label, "(Total!!Not Hispanic or Latino!!)"),
    var_detail = case_when(
      str_detect(label, "White") ~ "White",
      str_detect(label, "Black") ~ "Black",
      str_detect(label, "Asian") ~ "Asian",
      str_detect(label, "American Indian") ~ "American Indian",
      str_detect(label, "Native Hawaiian") ~ "Pacific Islander",
      str_detect(label, "Some Other Race") ~ "Other",
      str_detect(label, "Two or More Races") ~ "Two or more races",
      str_detect(label, "Hispanic") ~ "Hispanic",
      str_detect(label, "Total") ~ "Total",
      TRUE ~ label,
    ),
    var_group = case_when(
      name == "P005001" ~ "Total",
      between(name, "P005003", "P005010") ~ "Race/ethnicity",
      TRUE ~ "Age"
    ),
    var_level = case_when(
      var_detail %in% c("White", "Black", "Hispanic", "Asian", "Total", "Other") ~ var_detail,
      var_detail %in% c("American Indian", "Pacific Islander", "Two or more races") ~ "Other",
      var_detail %in% c("Under 5 years", "5 to 9 years", "10 to 14 years") ~ "Under 15 yrs",
      between(var_detail, "15 to 17 years", "22 to 24 years") ~ "15 to 24 yrs",
      var_detail %in% c("25 to 29 years", "30 to 34 years") ~ "25 to 34 yrs",
      var_detail %in% c("35 to 39 years", "40 to 44 years") ~ "35 to 44 yrs",
      var_detail %in% c("45 to 49 years", "50 to 54 years") ~ "45 to 54 yrs",
      between(var_detail, "55 to 59 years", "62 to 64 years") ~ "55 to 64 yrs",
      between(var_detail, "65 and 66 years", "85 years and over") ~ "65+ yrs"
    )
  ) |>
  select(variable = name, var_group, var_level, var_detail)

sf1_2010_vars
```

Request the data from the API. This time I cannot join to `cleve_blocks` to get precise mappings of census blocks to SPAs. Instead, I'll join to the `cleve_neigh` shape file to spatially join to the SPAs. This turns out to be *almost* as good, but not perfect.

```{r}
#| code-fold: true
#| results: hide

# Urban Partners definitions of greater Cleveland uses tracts and blocks.
westside_tracts_2010 <- westside_tracts_2020
downtown_core_tracts_2010 <- downtown_core_tracts_2020
downtown_core_blocks_2010 <- paste0("39035108701", c("3000", "3001", "3002", "3003", "3004"))

if (USE_API) {

  subdiv_2010_detail_0 <- 
    get_decennial( 
      geography = "county subdivision",
      sumfile = "sf1",
      variables = sf1_2010_vars$variable,
      state = "OH",
      county = "Cuyahoga",
      geometry = TRUE, 
      year = 2010
    ) |> 
    inner_join(sf1_2010_vars, by = "variable")

  subdiv_2010_detail_1 <- 
    subdiv_2010_detail_0 |>
    mutate(
      var_level = var_relevel(var_level),
      NAME = str_remove_all(NAME, "(, Cuyahoga County, Ohio)|(village)|(city)"),
      NAME = str_trim(NAME)
    ) |>
    rename(geo_name = NAME)
  
  # Sum the two rows (for each sex)
  subdiv_2010_detail <-
    subdiv_2010_detail_1 |> 
    select(-variable) |>
    summarize(.by = -c(value), value = sum(value))
           
  block_2010_detail_0 <- 
    get_decennial( 
      geography = "block",
      sumfile = "sf1",
      variables = sf1_2010_vars$variable,
      state = "OH",
      county = "Cuyahoga",
      geometry = TRUE, 
      year = 2010
    ) |> 
    inner_join(sf1_2010_vars, by = "variable")

  block_2010_detail_1 <-
    st_join(cleve_neigh, st_centroid(block_2010_detail_0), join = st_contains) |>
    mutate(
      var_level = var_relevel(var_level),
      greater_downtown = case_when(
        str_sub(GEOID, 6, 11) %in% westside_tracts_2010 ~ "Westside",
        str_sub(GEOID, 6, 11) %in% downtown_core_tracts_2010 ~ "Downtown Core",
        GEOID %in% downtown_core_blocks_2010 ~ "Downtown Core",
        TRUE ~ "Other"
      ),
      SPA = factor(str_to_title(SPA)),
      SPA = fct_relevel(SPA, "Downtown", after = 0),
      greater_downtown = factor(
        greater_downtown, levels = c("Downtown Core", "Westside", "Other"))
    ) |>
    select(GEOID, geo_name = NAME, geometry, var_group, var_level, var_detail, 
           value, SPA, greater_downtown)

  # Sum the two rows (for each sex)
  block_2010_detail <-
    block_2010_detail_1 |> 
    summarize(.by = -c(value), value = sum(value))
  
  subdiv_2010 <- 
    subdiv_2010_detail |>
    summarize(
      .by = c(GEOID, geo_name, geometry, var_group, var_level),
      value = sum(value)
    )
  
  block_2010 <- 
    block_2010_detail |>
    summarize(
      .by = c(GEOID, geo_name, geometry, var_group, var_level, SPA, greater_downtown),
      value = sum(value)
    )
  
  save(
    subdiv_2010_detail, block_2010_detail, subdiv_2010, block_2010, 
    file = "decennial_2010.Rdata"
  )

} else {
  
  load("decennial_2010.Rdata")
  
}
```

This time the sum of the neighborhoods, 395,601, doesn't quite equal the city total, 396,815. There must be city blocks whose centers are not captured in the shapes in `cleve_neigh`. Comparing my values to those in the [data table on Cleveland Open Data](https://data.clevelandohio.gov/datasets/ClevelandGIS::census-2020-analysis/explore?layer=0&location=41.454326%2C-81.671523%2C10.98&showTable=true), the largest differences are in *Euclid Green,* *Kamm's Corners*, and *Hopkins*. I haven't thought of a good way to fix this, so I'm settling for "close enough".

The *Downtown* SPA population of 9,464 *does* match the value reported in Cleveland Open Data. It was quite a bit lower than 2020 (13,302). My *Downtown Core* population of 15,156 is slightly different from Urban Partner's value of 15,330. The *Westside* population does match though.

::: panel-tabset
### Table

```{r}
#| echo: false
total_pop_table(subdiv_2010, block_2010, 2010) 
```

### Map

```{r}
#| echo: false
total_pop_plot(subdiv_2010, block_2010, 2010) 
```
:::

## 2000

2000 is similar to 2010 in that it uses **Summary File 1**.

```{r}
#| code-fold: false

sf1_2000_vars <-
  tidycensus::load_variables(2000, "sf1") |>
  filter(
    concept %in% c(
      "HISPANIC OR LATINO, AND NOT HISPANIC OR LATINO BY RACE [73]", 
      "SEX BY AGE [49]"
    ),
    !name %in% c("P004003", "P004004", "P012001", "P012002", "P012026"),
    !str_detect(label, "Population of two or more races!!"),
    !str_detect(name, "^PCT013")
  )
```

Same process: prepare the variables.

```{r}
#| code-fold: true

sf1_2000_vars <-
  sf1_2000_vars |>
  mutate(
    label = str_remove(label, "(Total!!Male!!)|(Total!!Female!!)"),
    label = str_remove(label, "(Total!!Not Hispanic or Latino!!)"),
    var_detail = case_when(
      str_detect(label, "White") ~ "White",
      str_detect(label, "Black") ~ "Black",
      str_detect(label, "Asian") ~ "Asian",
      str_detect(label, "American Indian") ~ "American Indian",
      str_detect(label, "Native Hawaiian") ~ "Pacific Islander",
      str_detect(label, "Some other race") ~ "Other",
      str_detect(label, "two or more races") ~ "Two or more races",
      str_detect(label, "Hispanic") ~ "Hispanic",
      str_detect(label, "Total") ~ "Total",
      TRUE ~ label,
    ),
    var_group = case_when(
      name == "P004001" ~ "Total",
      between(name, "P004002", "P004011") ~ "Race/ethnicity",
      TRUE ~ "Age"
    ),
    var_level = case_when(
      var_detail %in% c("White", "Black", "Hispanic", "Asian", "Total", "Other") ~ var_detail,
      var_detail %in% c("American Indian", "Pacific Islander", "Two or more races") ~ "Other",
      var_detail %in% c("Under 5 years", "5 to 9 years", "10 to 14 years") ~ "Under 15 yrs",
      between(var_detail, "15 to 17 years", "22 to 24 years") ~ "15 to 24 yrs",
      var_detail %in% c("25 to 29 years", "30 to 34 years") ~ "25 to 34 yrs",
      var_detail %in% c("35 to 39 years", "40 to 44 years") ~ "35 to 44 yrs",
      var_detail %in% c("45 to 49 years", "50 to 54 years") ~ "45 to 54 yrs",
      between(var_detail, "55 to 59 years", "62 to 64 years") ~ "55 to 64 yrs",
      between(var_detail, "65 and 66 years", "85 years and over") ~ "65+ yrs"
    )
  ) |>
  select(variable = name, var_group, var_level, var_detail)

sf1_2000_vars
```

Request the data from the API. I'll used the `cleve_neigh` shape file again to identify the SPAs. Tract and block identifiers can change from census to census, so I had to make some changes to the *Downtown Core* definition. I used the same block identifiers for Urban Partners' definitions, but they did not include 2020 in their report, so I'm not sure how much this differs.

```{r}
#| code-fold: true
#| results: hide

# Tract definition are same for 2000.
westside_tracts_2000 <- westside_tracts_2020

downtown_core_tracts_2000 <- c(
  "107100", "107200", "107300", "107400", "107500", "107600", "107700",
  "107800", "107900", "109200")

downtown_core_blocks_2000 <- 
  paste0("39035108701", c("3000", "3001", "3002", "3003", "3004"))

if (USE_API) {

  subdiv_2000_detail_0 <- 
    get_decennial( 
      geography = "county subdivision",
      sumfile = "sf1",
      variables = sf1_2000_vars$variable,
      state = "OH",
      county = "Cuyahoga",
      geometry = FALSE, # no county subdivision geography in 2000
      year = 2000
    ) |> 
    inner_join(sf1_2000_vars, by = "variable") 
  
  subdiv_2000_detail_1 <- 
    subdiv_2000_detail_0 |>
    mutate(
      var_level = var_relevel(var_level),
      NAME = str_remove_all(NAME, "(, Cuyahoga County, Ohio)|(village)|(city)"),
      NAME = str_trim(NAME)
    ) |>
    rename(geo_name = NAME)

  # Sum the two rows (for each sex)
  subdiv_2000_detail_2 <-
    subdiv_2000_detail_1 |> 
    select(-variable) |>
    summarize(.by = -c(value), value = sum(value))
           
  # No geometry for 2000? No problem! Use the 2010 geometry and replace the 
  # values with 2000.
  subdiv_2000_detail_3 <- 
    subdiv_2000_detail_2 |> 
    as_tibble() |> 
    select(GEOID, var_group, var_level, var_detail, value)
  
  subdiv_2000_detail <- 
    subdiv_2010_detail |>
    select(-value) |>
    inner_join(subdiv_2000_detail_3, 
               by = c("GEOID", "var_group", "var_level", "var_detail"))

  block_2000_detail_0 <- 
    get_decennial( 
      geography = "block",
      sumfile = "sf1",
      variables = sf1_2000_vars$variable,
      state = "OH",
      county = "Cuyahoga",
      geometry = TRUE, 
      year = 2000
    ) |> 
    inner_join(sf1_2000_vars, by = "variable")
  
  block_2000_detail_1 <-
    st_join(cleve_neigh, st_centroid(block_2000_detail_0), join = st_contains) |>
    mutate(
      var_level = var_relevel(var_level),
      greater_downtown = case_when(
        str_sub(GEOID, 6, 11) %in% westside_tracts_2000 ~ "Westside",
        str_sub(GEOID, 6, 11) %in% downtown_core_tracts_2000 ~ "Downtown Core",
        GEOID %in% downtown_core_blocks_2000 ~ "Downtown Core",
        TRUE ~ "Other"
      ),
      SPA = factor(str_to_title(SPA)),
      SPA = fct_relevel(SPA, "Downtown", after = 0),
      greater_downtown = factor(
        greater_downtown, levels = c("Downtown Core", "Westside", "Other"))
    ) |>
    select(GEOID, geo_name = NAME, geometry, var_group, var_level, var_detail, 
           value, SPA, greater_downtown)
  
  # Sum the two rows (for each sex)
  block_2000_detail <-
    block_2000_detail_1 |> 
    summarize(.by = -c(value), value = sum(value))
  
  subdiv_2000 <- 
    subdiv_2000_detail |>
    summarize(
      .by = c(GEOID, geo_name, geometry, var_group, var_level),
      value = sum(value)
    )
  
  block_2000 <- 
    block_2000_detail |>
    summarize(
      .by = c(GEOID, geo_name, geometry, var_group, var_level, SPA, greater_downtown),
      value = sum(value)
    )
  
  save(
    subdiv_2000_detail, block_2000_detail, subdiv_2000, block_2000, 
    file = "decennial_2000.Rdata"
  )

} else {
  
  load("decennial_2000.Rdata")
  
}
```

As with 2010, the sum of the neighborhoods, 477,107, doesn't quite match the city value, 478,403, but that is still pretty close. Wow, 478,403 people in 2000, that's 100K more than 2020. On the other hand, only 6,310 people lived *Downtown*. The *Downtown* resurgence of does not seem to be a recent phenomena.

::: panel-tabset
### Table

```{r}
#| echo: false
total_pop_table(subdiv_2000, block_2000, 2000) 
```

### Map

```{r}
#| echo: false
total_pop_plot(subdiv_2000, block_2000, 2000) 
```
:::

## 2023 (ACS)

The 2023 American Community Survey publishes a 1-year and 5-year average. The 1-year survey might be helpful, but it doesn't have block-level data. I'll download the subdivision file and check in on Cleveland as a whole.

```{r}
#| code-fold: false

acs1_2023_vars <-
  tidycensus::load_variables(2023, "acs1") |>
  filter(
    concept %in% c("Sex by Age", "Hispanic or Latino Origin by Race"),
    # between(name, "B01001_001E_001N", "P2_011N"),
    !name %in% c("B01001_002", "B01001_026", "B03002_001", "B03002_002",
                 "B03002_010", "B03002_011"),
    name <= "B03002_012"
  )
```

Same variable prep.

```{r}
#| code-fold: true

acs1_2023_vars <-
  acs1_2023_vars |>
  mutate(
    label = str_remove_all(label, "(Estimate!!Total:!!)|(Male:!!)|(Female:!!)"),
    label = case_when(
      str_detect(label, "White") ~ "White",
      str_detect(label, "Black") ~ "Black",
      str_detect(label, "Asian") ~ "Asian",
      str_detect(label, "American Indian") ~ "American Indian",
      str_detect(label, "Native Hawaiian") ~ "Pacific Islander",
      str_detect(label, "Some other race") ~ "Other",
      str_detect(label, "Two or more races") ~ "Two or more races",
      str_detect(label, "Hispanic") ~ "Hispanic",
      str_detect(label, "Total") ~ "Total",
      TRUE ~ label,
    ),
    var_group = case_when(
      name == "B01001_001" ~ "Total",
      between(name, "B03002_003", "B03002_012") ~ "Race/ethnicity",
      TRUE ~ "Age"
    ),
    var_level = case_when(
      label %in% c("White", "Black", "Hispanic", "Asian", "Total", "Other") ~ label,
      label %in% c("American Indian", "Pacific Islander", "Two or more races") ~ "Other",
      label %in% c("Under 5 years", "5 to 9 years", "10 to 14 years") ~ "Under 15 yrs",
      between(label, "15 to 17 years", "22 to 24 years") ~ "15 to 24 yrs",
      label %in% c("25 to 29 years", "30 to 34 years") ~ "25 to 34 yrs",
      label %in% c("35 to 39 years", "40 to 44 years") ~ "35 to 44 yrs",
      label %in% c("45 to 49 years", "50 to 54 years") ~ "45 to 54 yrs",
      between(label, "55 to 59 years", "62 to 64 years") ~ "55 to 64 yrs",
      between(label, "65 and 66 years", "85 years and over") ~ "65+ yrs"
    )
  ) |>
  select(variable = name, label, var_group, var_level)

acs1_2023_vars
```

Request the data from the API.

```{r}
#| code-fold: true
#| results: hide

if (USE_API) {

  subdiv_2023_detail_0 <- 
    get_acs( 
      geography = "county subdivision",
      sumfile = "acs1",
      variables = acs1_2023_vars$variable,
      state = "OH",
      county = "Cuyahoga",
      geometry = FALSE, # no geo file for ACS-1yr
      year = 2023
    ) |> 
    inner_join(acs1_2023_vars, by = "variable")
  
  subdiv_2023_detail_1 <- 
    subdiv_2023_detail_0 |>
    mutate(
      var_level = var_relevel(var_level),
      NAME = str_remove_all(NAME, "(, Cuyahoga County, Ohio)|(village)|(city)"),
      NAME = str_trim(NAME)
    ) |>
    rename(geo_name = NAME)

  # Sum the two rows (for each sex)
  subdiv_2023_detail <-
    subdiv_2023_detail_1 |> 
    select(-variable) |>
    summarize(.by = -c(estimate), value = sum(estimate))

  subdiv_2023 <- 
    subdiv_2023_detail |>
    summarize(
      .by = c(GEOID, geo_name, var_group, var_level),
      value = sum(value)
    )
  
  save(subdiv_2023_detail, subdiv_2023, file = "acs1yr_2023.Rdata")

} else {
  
  load("acs1yr_2023.Rdata")
  
}
```

Cleveland's population has continued to decline, down to 367,523 from 372,624 in 2020.

```{r}
#| echo: false

subdiv_2023 |>
  as_tibble() |>
  filter(var_level == "Total", value > 0) |>
  mutate(subgrp = if_else(geo_name == "Cleveland", geo_name, "Other")) |>
  summarize(.by = subgrp, pop = sum(value)) |>
  arrange(subgrp) |>
  janitor::adorn_totals() |>
  gt() |>
  gt::fmt_number(columns = pop, decimals = 0) |>
  gt::tab_header(
    glue("2023 Population Estimates for Cleveland and Vicinity")
  ) |>
  gt::tab_style(
    style = cell_text(color = "firebrick4"),
    locations = cells_body(rows = str_detect(subgrp, "(Cleveland)|(Downtown)"))
  ) |>
  gt::tab_style(
    style = cell_text(weight = "bold"),
    locations = cells_body(rows = subgrp == "Total")
  ) |>
  gt::cols_label(subgrp = "", pop = "Population")
```

# Population Trends

Cleveland lost 17% of its population between 2000 and 2010. The population loss was widespread, but especially pronounced on the east side. The *Downtown* SPA was the lone exception, actually *increasing* its population 50%. Parts of the city recovered population over the next decade, in particular, *University Circle* and *Ohio City*. *Downtown* grew another 41%. The east side continued to decline. *Glenville*, *Kinsman*, *Saint Clair-Superior*, and *Woodland Hills* have all lost about 50% of their population since 2000.

```{r}
#| echo: false

subdiv_long <- bind_rows(
  `2000` = subdiv_2000 |> as_tibble() |>
    summarize(.by = c(geo_name, var_group, var_level), value = sum(value)),
  `2010` = subdiv_2010 |> as_tibble() |>
    summarize(.by = c(geo_name, var_group, var_level), value = sum(value)),
  `2020` = subdiv_2020 |> as_tibble() |>
    summarize(.by = c(geo_name, var_group, var_level), value = sum(value)),
  `2023` = subdiv_2023 |> as_tibble() |>
    summarize(.by = c(geo_name, var_group, var_level), value = sum(value)),
  .id = "yr"
)

subdiv_wide_0 <-
  subdiv_long |>
  rename(pop = value) |>
  mutate(.by = c(yr, geo_name, var_group), grp = pop / sum(pop)) |>
  pivot_wider(names_from = yr, values_from = c(pop, grp))

subdiv_wide <-
  subdiv_2010 |>
  select(-value) |>
  inner_join(subdiv_wide_0, by = c("geo_name", "var_group", "var_level")) |>
  mutate(
    d10 = pop_2010 - pop_2000,
    p10 = d10 / pop_2000,
    d20 = pop_2020 - pop_2010,
    p20 = d20 / pop_2010,
    d23 = pop_2023 - pop_2020,
    p23 = d23 / pop_2020,
    tt = glue(
      "{var_level} in {geo_name}\n\n",
      "2010: {comma(pop_2010)}\n",
      "2020: {comma(pop_2020)}, {if_else(p20>0,'+','')}{percent(p20, 1)}\n",
      "2023: {comma(pop_2023)}, {if_else(p23>0,'+','')}{percent(p23, 1)}\n",
    )
  ) 

# Repeat with neighborhoods.

neigh_long <- bind_rows(
  `2000` = block_2000 |> as_tibble() |> 
    summarize(.by = c(SPA, var_group, var_level), value = sum(value)),
  `2010` = block_2010 |> as_tibble() |> 
    summarize(.by = c(SPA, var_group, var_level), value = sum(value)),
  `2020` = block_2020 |> as_tibble() |> 
    summarize(.by = c(SPA, var_group, var_level), value = sum(value)),
  .id = "yr"
)

neigh_wide_0 <-
  neigh_long |>
  rename(pop = value) |>
  mutate(.by = c(yr, SPA, var_group), grp = pop / sum(pop)) |>
  pivot_wider(names_from = yr, values_from = c(pop, grp))

neigh_wide <-
  cleve_neigh |> 
  inner_join(neigh_wide_0, by = c("SPA")) |>
  mutate(
    d10 = pop_2010 - pop_2000,
    p10 = d10 / pop_2000,
    d20 = pop_2020 - pop_2010,
    p20 = d20 / pop_2010,
    tt = glue(
      "{SPA}\n{var_level} Population\n\n",
      "2000: {comma(pop_2000)}\n",
      "2010: {comma(pop_2010)}, {if_else(p10>0,'+','')}{percent(p10, 1)}\n",
      "2020: {comma(pop_2020)}, {if_else(p20>0,'+','')}{percent(p20, 1)}\n"
    )
  ) 

plot_neigh <- function(.var_group, .var_level, fill_var, yrs) {
  p <-
    neigh_wide |>
    filter(var_group == .var_group, var_level == .var_level) |>
    ggplot() +
    geom_sf(data = oh_state, color = "gray60") +
    geom_sf_interactive(
      data = oh_counties, aes(tooltip = NAME),
      fill = "honeydew", color = "gray90"
    ) +
    geom_sf_interactive(aes(fill = {{fill_var}}, tooltip = tt), show.legend = FALSE) +
    scale_fill_gradient2(
      low = "firebrick", mid = "white", high = "dodgerblue", midpoint = 0
    ) +
    coord_sf(xlim = c(-81.9, -81.5), ylim = c(41.37, 41.62)) +
    theme(
      panel.background = element_rect(fill = "skyblue"),
      panel.grid = element_blank(),
    axis.text = element_blank()
    ) +
    labs(
      title = glue("Population Changes, {yrs}")
    )
  
  girafe(ggobj = p)
}
```

::: panel-tabset
## 2000 - 2010

```{r}
#| echo: false

plot_neigh("Total", "Total", p10, "2000 - 2010")
```

## 2010 - 2020

```{r}
#| echo: false

plot_neigh("Total", "Total", p20, "2010 - 2020")
```

## Table

```{r}
#| code-fold: true
#| echo: false

neigh_gt <- function(.var_group, .var_level) {
  
  by_neigh <-
    neigh_wide |>
    as_tibble() |>
    filter(var_group == .var_group, var_level == .var_level) |>
    arrange(SPA) |>
    janitor::adorn_totals() |>
    mutate(
      p10 = pop_2010 / pop_2000 - 1,
      p20 = pop_2020 / pop_2010 - 1
    ) |>
    select(SPA, pop_2000, pop_2010, p10, pop_2020, p20)
  
  by_subdiv <- 
    subdiv_wide |> 
    as_tibble() |>
    filter(var_group == .var_group, var_level == .var_level) |>
    mutate(SPA = if_else(geo_name == "Cleveland", geo_name, "Other")) |>
    summarize(.by = SPA, across(starts_with("pop"), sum)) |>
    arrange(SPA) |>
    janitor::adorn_totals() |>
    mutate(
      p10 = pop_2010 / pop_2000 - 1,
      p20 = pop_2020 / pop_2010 - 1,
      p23 = pop_2023 / pop_2020 - 1
    ) |>
    select(SPA, pop_2000, pop_2010, p10, pop_2020, p20, pop_2023, p23)

  bind_rows(
    `Cuyahoga County Subdivisions` = by_subdiv,
    `Cleveleland Neighborhoods` = by_neigh,
    .id = "Grouping"
  ) |>
    group_by(Grouping) |>
    gt::gt() |>
    gt::fmt_number(c(3, 4, 6, 8), decimals = 0) |>
    gt::fmt_percent(c(5, 7, 9), decimals = 0) |>
    gt::tab_style(
      style = cell_text(color = "firebrick4"),
      locations = cells_body(columns = p10, rows = p10 < 0)
    ) |>
    gt::tab_style(
      style = cell_text(color = "firebrick4"),
      locations = cells_body(columns = p20, rows = p20 < 0)
    ) |>
    gt::tab_style(
      style = cell_text(color = "firebrick4"),
      locations = cells_body(columns = p23, rows = p23 < 0)
    ) |>
    gt::tab_style(
      style = cell_fill(color = "honeydew2"),
      locations = cells_group()
    ) |>
    gt::tab_style(
      style = cell_text(weight = "bold"),
      locations = cells_body(rows = SPA == "Total")
    ) |>
    gt::tab_style(
      style = cell_text(weight = "bold"),
      locations = cells_body(rows = SPA %in% c("Cleveland", "Downtown"), columns = 2)
    ) |>
    gt::cols_label(
      pop_2000 = "2000", pop_2010 = "2010", pop_2020 = "2020", pop_2023 = "2023",
      SPA = "",
      p10 = htmltools::HTML("&Delta;"),
      p20 = htmltools::HTML("&Delta;"),
      p23 = htmltools::HTML("&Delta;")
    ) |>
    gt::sub_missing(missing_text = "") |>
    gt::tab_header(
      glue("Changing {.var_level} Population in Cleveland, 2000-2023"),
      "Decennial and ACS censuses"
    ) |>
    gt::tab_options(
      heading.align = "left"
    )
}

neigh_gt("Total", "Total")
```
:::

# Race/ethnicity

While Cleveland's white and black populations have fallen, Asian, Hispanic, and other (including two or more races) have increased. The non-white populations have increased in the rest of Cuyahoga County, while white has fallen from 80% in 2000 to 67% in 2023.

```{r}
#| echo: false

subdiv_long |>
  filter(var_group %in% c("Race/ethnicity")) |>
  mutate(geo_name = if_else(geo_name == "Cleveland", geo_name, "Other Parts of Cuyahoga County")) |>
  summarize(.by = c(yr, geo_name, var_level), value = sum(value)) |>
  mutate(.by = c(yr, geo_name), pct = value / sum(value)) |>
  pivot_wider(names_from = yr, values_from = c(value, pct)) |>
  select(geo_name, var_level, ends_with("2000"), ends_with("2010"), ends_with("2020"), 
         ends_with("2023")) |>
  mutate(across(starts_with("pct"), \(x) percent(x, 1))) |>
  janitor::adorn_totals(where = "row", fill = "", na.rm = TRUE, name = "County Total",
                        starts_with("value")) |>
  mutate(
    var_level = factor(var_level, levels = levels(subdiv_long$var_level)),
    geo_name = factor(geo_name, levels = c("Cleveland", "Other Parts of Cuyahoga County", "County Total"))
  ) |>
  arrange(geo_name, var_level) |>
  group_by(geo_name) |>
  gt::gt() |>
  gt::fmt_number(starts_with("value"), decimals = 0) |>
  gt::sub_missing(missing_text = "Total") |>
  gt::cols_label(
    var_level = "",
    value_2000 = "2000", value_2010 = "2010", value_2020 = "2020", value_2023 = "2023",
    pct_2000 = "", pct_2010 = "", pct_2020 = "", pct_2023 = ""
  ) |>
  gt::cols_align("left", var_level) |>
  gt::tab_style(cell_borders("right", "gray80"), cells_body(columns = c(2, 4, 6, 8))) |>
  gt::tab_style(gt::cell_fill("honeydew2"), cells_group()) |>
  gt::tab_header("Cuyahoga Race/ethnicity Population Change") |>
  gt::tab_options(heading.align = "left")
```

The SPAs with historically high concentrations of black populations like *Glenville*, *Hough*, and *Mount Pleasant*, have experienced the greatest population declines. The more integrated SPAs like *Downtown*, *Bellaire-Puritas*, and *Brooklyn Centre*, have tended to retain their populations. These neighborhoods have become more diverse with rising Hispanic, Asian, and _other_ populations.

```{r}
#| fig-height: 9
#| echo: false

x <-
  neigh_long |>
  filter(var_group %in% c("Race/ethnicity", "Total")) |>
  mutate(.by = c(yr, SPA), pct = value / sum(value) * 2)
# neigh_long |> filter(var_group == "Total", yr == "2000", SPA == "Collinwood Nottingham")
x_tooltip <- 
  x |>
  select(-var_group) |>
  pivot_wider(names_from = var_level, values_from = c(value, pct)) |>
  mutate(tt = glue(
    "{SPA} | {yr}\n\n",
    "{percent(pct_Black, 1)} Black ({comma(value_Black)})\n",
    "{percent(pct_White, 1)} White ({comma(value_White)})\n",
    "{percent(pct_Hispanic, 1)} Hispanic ({comma(value_Hispanic)})\n",
    "{percent(pct_Asian, 1)} Asian ({comma(value_Asian)})\n",
    "{percent(pct_Other, 1)} Other ({comma(value_Other)})\n\n",
    "{percent(pct_Total, 1)} Total ({comma(value_Total)})",
  )) |>
  select(yr, SPA, tt)

p <-
  x |> 
  inner_join(x_tooltip, by = c("yr", "SPA")) |>
  filter(var_level != "Total") |>
  ggplot(aes(x = as.factor(yr), y = value)) +
  geom_col_interactive(aes(fill = var_level, tooltip = tt)) + 
  facet_wrap(vars(SPA)) +
  labs(y = NULL, fill = NULL, title = "Cleveland Population by Race/ethnicity") +
  scale_y_continuous(labels = number_format(scale_cut = cut_short_scale())) +
  theme(legend.position = "top")

girafe(ggobj = p)
```

# Age

Unfortunately, there 2020 and 2023 ACS censuses do not provide block level data for age. We can still make some inferences from the higher-level summaries. The one trend that stands out is the decline in children under 15 in Cuyahoga County, and especially Cleveland. Older people aged 55 and up have held or even increased their numbers.

```{r}
#| echo: false

subdiv_long |>
  filter(var_group %in% c("Age")) |>
  mutate(geo_name = if_else(geo_name == "Cleveland", geo_name, "Other Parts of Cuyahoga County")) |>
  summarize(.by = c(yr, geo_name, var_level), value = sum(value)) |>
  mutate(.by = c(yr, geo_name), pct = value / sum(value)) |>
  pivot_wider(names_from = yr, values_from = c(value, pct)) |>
  select(geo_name, var_level, ends_with("2000"), ends_with("2010"), ends_with("2020"), 
         ends_with("2023")) |>
  mutate(across(starts_with("pct"), \(x) percent(x, 1))) |>
  janitor::adorn_totals(where = "row", fill = "", na.rm = TRUE, name = "County Total",
                        starts_with("value")) |>
  mutate(
    var_level = factor(var_level, levels = levels(subdiv_long$var_level)),
    geo_name = factor(geo_name, levels = c("Cleveland", "Other Parts of Cuyahoga County", "County Total"))
  ) |>
  arrange(geo_name, var_level) |>
  group_by(geo_name) |>
  gt::gt() |>
  gt::fmt_number(starts_with("value"), decimals = 0) |>
  gt::sub_missing(missing_text = "Total") |>
  gt::cols_label(
    var_level = "",
    value_2000 = "2000", value_2010 = "2010", value_2020 = "2020", value_2023 = "2023",
    pct_2000 = "", pct_2010 = "", pct_2020 = "", pct_2023 = ""
  ) |>
  gt::cols_align("left", var_level) |>
  gt::tab_style(cell_borders("right", "gray80"), cells_body(columns = c(2, 4, 6, 8))) |>
  gt::tab_style(gt::cell_fill("honeydew2"), cells_group()) |>
  gt::tab_header("Cuyahoga Age Population Change") |>
  gt::tab_options(heading.align = "left")
```
